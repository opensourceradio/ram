#!/bin/zsh
# shellcheck shell=bash disable=SC2016,SC2190
# SC2016: "$Hash" is not a variable.
# SC2190: ZSH associative arrays are different from BASH.

##############################################################################
##############################################################################
##
## Generate Logs for all Rivendell services.
##
## See also: rdlogmanager --help
##
##############################################################################
##############################################################################

zmodload zsh/datetime

# This script complies with Semantic Versioning: http://semver.org/
declare -ri v_major=0
declare -ri v_minor=2
declare -ri v_patch=5
declare -r v_hash='$Hash$'

declare -ir one_day=$(( 60 * 60 * 24))

declare -i DEBUG=0
declare -i SHOW_VERSION=0

# Do not overwrite existing log by default (see options below).
# Sigh, rdlogmanager(1) has an "unusual" sense of "force" vs "preserve".
declare PRESERVE="-P"

# Default number of days for which to generate Logs.
declare -i DAYS=1

function usage() {
  local my_name="${1:t}"

  cat <<EOF
${my_name} [ --days <number-of-days> ] [ --start (-s) <date> ] [ --end (-e) <date> ]
                 [ --force (-f) ] [ --service <name> ]
                 [ --help (-h) ] [ --version (-v) ]

$(${FMT} <<<"${my_name} uses rdlogmanager(1) to generate Logs for all SERVICES. With no optional arguments, ${my_name} generates Logs for 'tomorrow' (the day after the current day). Also with no optional arguments, on Fridays ${my_name} generates Logs for all SERVICES for Saturday, Sunday and Monday.")

$(${FMT} <<<"Without the optional '--service' parameter, ${my_name} generates logs for all Rivendell Services. Specify a single service with the '--service <NAME>' option.")

$(${FMT} <<<"By default, ${my_name} does not overwrite existing Logs (i.e., rdlogmanager(1) is invoked with the '-P' [preserve] option). You may force overwriting existing Logs by calling ${my_name} with the '--force' ('-f') option.")

$(${FMT} <<<"You may specify a range of days for which rdlogmanager(1) should generate Logs by calling ${my_name} with the '--start' and '--end' options and specifying the date in YYYY-MM-DD format. Specifying '--end' without '--start' assumes 'tomorrow' as the starting day. Specifying '--start' without '--end' means 'generate a Log just for that day'. Specifying neither '--start' nor '--end' causes ${my_name} to generate Logs for 'tomorrow' (see above).")

$(${FMT} <<<"Alternatively, you may instruct ${my_name} to generate a specific number of days of Logs with the --days <D> option. The starting day in this case is 'tomorrow'.")

$(${FMT} <<<"${my_name} saves the output of rdlogmanager(1) in the Desktop folder of the invoking user, and also emails the output to the addresses listed in the MAILTO shell variable.")

$(${FMT} <<<"Enable ZSH debugging with the --debug (-D) option.")

$(${FMT} <<<"See rdlogmanager(1) and 'rdlogmanager --help' for additional details.")

EOF
}

############# BEGIN external shell commands used in this script. #############
# This script uses these 7 external commands.
# Look for them in their upper case, parameter expanded form.
typeset -a our_commands
our_commands=( cp fmt getopt logger mktemp rdlogmanager rm )
# Find the executables we need; this uses some basic shell and a ZSH trick:
# the (U) in the eval says to evaluate the parameter as all upper case
# letters. This snippet generates shell parameters representing the upper case
# equivalent of the command names and sets the parameter values to the full path
# of the commands.
# Refresh this segment in Emacs by marking the appropriate region (or the whole
# buffer with C-xH) and replacing it with C-uM-|mk-ourCommands (shell-command-on-region).
typeset C D
for C in ${our_commands[*]} ; do
  # shellcheck disable=SC2154 # ZSH: ${path} is set by the shell.
  for D in ${path} ; do
    # shellcheck disable=SC2140,SC2086 # we need the quotes
    [[ -x "${D}/${C}" ]] && { eval "${(U)C//-/_}"="${D}/${C}" ; break ; }
  done
  [[ -x $(eval print \$"${(U)C//-/_}") ]] || { print "Cannot find ${C}! Done."; return 1 ; }
done
unset our_commands C D
############## END external shell commands used in this script. ##############

if ! TEMP=$(${GETOPT} -o Dd:e:fhs:v --long debug,days:,force,help,version,service:,start:,end: -n "${0:t}" -- "${@}") ; then
  print "getopt(1) Fatal Error (${?}). Terminating." >&2
  return 1
fi
eval set -- "${TEMP}"
while :
do
  case "${1}" in
    -d|--day*) DAYS=${2} ; shift 2 ;;
    -f|--forc*) unset PRESERVE ; shift ;;
    --service) SERVICE=${2} ; shift 2 ;;
    -s|--start) START_DATE=${2} ; shift 2 ;;
    -e|--end) END_DATE=${2} ; shift 2 ;;
    -D|--debug) DEBUG=1 ; shift ;;
    -h|--help) usage "${0}" ; exit ;;
    -v|--vers*) SHOW_VERSION=1 ; shift ;;
    --) shift ; break ;;
    *) echo 'Internal error!' ; exit 1 ;;
  esac
done
unset TEMP

if ((SHOW_VERSION)) ; then
  typeset commit_hash="${v_hash}"
  [[ "${v_hash}" == '$Hash$' ]] &&
    commit_hash="prerelase"
  print "${0:t}: version ${v_major}.${v_minor}.${v_patch}-${${commit_hash#\$Hash: }%$}"
  exit 0
fi

exec 1> "/var/tmp/${0:t}.out"
exec 2> "/var/tmp/${0:t}.err"

if [[ -r /usr/local/bin/zsh-functions ]] ; then
  source /usr/local/bin/zsh-functions
elif [[ -r /usr/bin/zsh-functions ]] ; then
  source /usr/bin/zsh-functions
else
  ${LOGGER} --stderr -t "${0:t}" -p local7.err -i "ERROR: Cannot continue without zsh-functions! (Error: ${?})"
  exit 3
fi

((DEBUG)) && setopt xtrace

# Exit values from rdlogmanager(1).
declare -A rdlogmanager_exit_values
rdlogmanager_exit_values=(
  0  "Normal exit"
  2  "Unable to open database"
  4  "Unknown/invalid command line option"
  5  "Unable to overwrite output [-P given]"
  6  "No such service"
  7  "No such log"
  8  "No such report"
  9  "Log generation failed"
  10 "Schedule import failed"
  11 "Insufficient permissions"
  12 "Report generation failed"
)

declare -ri right_now=${EPOCHSECONDS}
declare -r MAILTO=${MAILTO:-"dklann@broadcasttool.com"}

# Gather all the Services from Rivendell unless
# they asked for a specific Service
typeset -a services
if [[ -n "${SERVICE}" ]] ; then
  services=( "${SERVICE}" )
else
  # SC2207: ZSH does not have BASH mapfile.
  # shellcheck disable=SC2207
  services=( $(doSQL "SELECT name FROM SERVICES") )
fi

declare output_file
if ! output_file=$(${MKTEMP}) ; then
  ${LOGGER} --stderr -t "${0:t}" -p local7.err -i "Error trying to create temporary file. Cannot continue."
  exit 3
fi
# No changes to the value of the parameter.
declare -r output_file

# SC2064: I want this trap argument to expand now.
# shellcheck disable=SC2064
trap "${RM} -f '${output_file}' ; exit ;" 0 1 2 3

# Get the current full weekday name (%A) (but permit setting it in
# the calling environment for testing).
declare -r today=${TODAY:-$(strftime "%A" "${right_now}")}

# With no command line options, Logs are generated for tomorrow.
# SC2155: I *know* the strftime() works.
# shellcheck disable=SC2155
declare -r tomorrow_YYYYMMDD=$(strftime "%F" $(( right_now + one_day )))
# SC2155: See above.
# shellcheck disable=SC2155
declare -ri tomorrow_seconds=$(strftime -r "%F" "${tomorrow_YYYYMMDD}")

declare -i start_date_seconds
declare -i end_date_seconds

# Set the start date to tomorrow if not specified on the command line.
if [[ -n "${START_DATE}" ]] ; then
  if ! [[ "${START_DATE}" =~ [[:digit:]]{4}(-[[:digit:]]{2}){2} ]] ; then
    ${LOGGER} --stderr -t "${0:t}" -p local7.err -i "ERROR: Cannot make sense of Start Date '${START_DATE}'. I quit."
    exit
  fi
  start_date_seconds=$(strftime -r "%F" "${START_DATE}")
else
  start_date_seconds="${tomorrow_seconds}"
fi

# Set the end date to the same as the start date if not specified on
# the command line.
if [[ -n "${END_DATE}" ]] ; then
  if ! [[ "${END_DATE}" =~ [[:digit:]]{4}(-[[:digit:]]{2}){2} ]] ; then
    ${LOGGER} --stderr -t "${0:t}" -p local7.err -i "ERROR: Cannot make sense of End Date '${END_DATE}'. I quit."
    exit
  fi
  end_date_seconds=$(strftime -r "%F" "${END_DATE}")
else
  end_date_seconds="${start_date_seconds}"
fi

# Same thing if number of days was specified on the command line.
if ((DAYS > 1)) ; then
  end_date_seconds=$((start_date_seconds + (one_day * DAYS)))
fi

# For each day offset and for each service found:
# Generate a Log (-g) for tomorrow or the specific (set of) day(s).
#   preserve existing Logs (-P) unless we are called with --force
#   service: (e.g.: "Production") (-s)
#   merge traffic (-t)
#   merge music (-m)
#   day spec (-d) is "tomorrow" (0) unless ${START_DATE} is specified
declare -ri start_day_offset=$(( ( start_date_seconds - tomorrow_seconds - one_day ) / one_day ))
declare -ri end_day_offset=$(( ( end_date_seconds - tomorrow_seconds - one_day ) / one_day ))

for (( day_offset = start_day_offset + 1; day_offset <= (end_day_offset + 1); day_offset++ )) ; do
  for service in ${services[*]} ; do
    if ! ${RDLOGMANAGER} -s "${service}" -g -t -m -d "${day_offset}" ${PRESERVE} 2>&1 ; then
      ${LOGGER} --stderr -t "${0:t}" -p local7.info -i "INFO: ${RDLOGMANAGER} (${day_offset}) exited with value ${?} ('${rdlogmanager_exit_values[${?}]}')"
    fi

    # Also create Logs for Sunday and Monday if ${today} is
    # 'Friday' and we do not have an End Date.
    if [[ "${today}" == Friday ]] && [[ -z "${END_DATE}" ]] ; then
      if ! ${RDLOGMANAGER} -s "${service}" -g -t -m -d 1 ${PRESERVE} 2>&1 ; then
	${LOGGER} --stderr -t "${0:t}" -p local7.info -i "INFO: ${RDLOGMANAGER} (Sunday) exited with value ${?} ('${rdlogmanager_exit_values[${?}]}')"
      fi
      if ! ${RDLOGMANAGER} -s "${service}" -g -t -m -d 2 ${PRESERVE} 2>&1 ; then
	${LOGGER} --stderr -t "${0:t}" -p local7.info -i "INFO: ${RDLOGMANAGER} (Monday) exited with value ${?} ('${rdlogmanager_exit_values[${?}]}')"
      fi
    fi
  done
done > "${output_file}"

# Save a copy in the user "rd"'s Desktop folder if such a folder exists.
# BUG ALERT: This works only for Rivendell installations that follow the
# "reference" installation methodology.
if [[ -d ~rd/Desktop ]] ; then
  ${CP} "${output_file}" ~rd/Desktop/RD-Log-Generate.txt
  ${CHOWN} rd: ~rd/Desktop/RD-Log-Generate.txt
  ${LOGGER} --stderr -t "${0:t}" -p local7.info -i "INFO: copied output file to ~rd/Desktop/RD-Log-Generate.txt."
fi

# Send email to the addresses in $MAILTO with the same output as is on
# the desktop.
if [[ -s "${output_file}" ]] ; then
  sendNotification "${0:t}" "${MAILTO}" LOG-GENERATE "Rivendell Logs have been generated." "${output_file}"
else
  sendNotification "${0:t}" "${MAILTO}" LOG-GENERATE "rdlogmanager(1) created no output. Did it run? Better check on it."
fi

exit

# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: ++ ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***

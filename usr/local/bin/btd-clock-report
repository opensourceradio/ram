#!/bin/zsh
# shellcheck shell=bash disable=SC1105,SC2046,SC2079,SC2086,SC2089,SC2090,SC2154
# SC1105: using (( )) correctly for ZSH
# SC2046: we do not care about the word splitting in unquoted $() expansion
# SC2079: ZSH arithmetic expressions can do floating point
# SC2086: all instances of parameters are double-quoted the way I want them
# SC2089: quotes are working the way we want
# SC2090: quotes are working the way we want
# SC2154: reference parameters are set by ZSH for us

##############################################################################
##############################################################################
##
## btd-clock-report - Display the events for the named Rivendell Clock on
##                    stdout.
##
## Requires a Clock name as the sole argument on the command line.
##
##############################################################################
##############################################################################

setopt NO_CASE_MATCH
zmodload zsh/regex
zmodload zsh/datetime
zmodload zsh/terminfo
zmodload zsh/stat
autoload colors
colors

# This script complies with Semantic Versioning: http://semver.org/
v_major=0
v_minor=3
v_patch=2
# SC2016: $Hash is not a variable, it's a token that gets replaced by git(1)
# shellcheck disable=SC2016
v_hash='$Hash$'

##############################################################################
## Locally defined subroutines
##############################################################################

# How to use this command.
usage() {
  local my_name="${1:t}"

  "${CAT}" << EOF
$(${FMT} <<<"${my_name}: display events for the named Rivendell Clock (or all Clocks) on STDOUT (aka, the terminal)")

Summary
"${my_name}" [ --version (-V) ] --all || <Clock_Name> || "list"

Description
$(${FMT} <<<"${my_name} formats and dumps the contents of the named Clock. Use the word 'list' to see a list of Clock names.")

$(${FMT} <<<"The --all option causes ${my_name} to display all Rivendell Clocks to STDOUT.")

$(${FMT} <<<"The --verbose option enables more chattiness in the operation. ${my_name} sends diagnostic output to the standard error (STDERR) channel.")

EOF
}

# Throw an error and return an unsuccessful return code.
error() {
  local message="${1}"

  "${FMT}" >&2 <<EOF

${RED}ERROR:${NORM} ${message}

EOF
  echo 254
  return 254
}

# Check to be sure it is a valid Clock. Returns true or false based on
# the regex match test
valid_clock() {
  local defined_clocks="${1}" ; shift
  local requested_clock="${1}" ; shift

  [[ "${defined_clocks}" =~ .*${requested_clock}.* ]]
}

# Display all the events in one clock along with its title.
show_clock() {
  local full_name="${1}" ; shift
  local VERBOSE="${1}"

  local query l_query c_query
  local -i ev_name_width event_count length
  local -i start_time event_end
  local -i time_type
  local event_name
  local clk_name="${full_name// /_}_CLK"

  # The pre-version-300 clocks structure
  if okDatabaseStructure "${clk_name}:event_name+start_time+length" "${VERBOSE}" ; then
    query="SELECT event_name,start_time,length FROM \`${clk_name}\` ORDER BY start_time ASC"
    c_query="SELECT COUNT(*) FROM \`${clk_name}\`"
    l_query="SELECT LENGTH(event_name) FROM \`${clk_name}\` ORDER BY LENGTH(event_name) DESC LIMIT 1"
  # The post-version-300 clocks structure
  elif okDatabaseStructure CLOCK_LINES:clock_name+event_name+start_time+length,EVENTS:time_type "${VERBOSE}" ; then
    query="SELECT event_name,start_time,time_type,length FROM CLOCK_LINES join EVENTS on event_name = name WHERE clock_name='${full_name}' ORDER BY start_time ASC"
    c_query="SELECT COUNT(*) FROM CLOCK_LINES WHERE clock_name='${full_name}'"
    l_query="SELECT LENGTH(event_name) FROM CLOCK_LINES WHERE clock_name='${full_name}' ORDER BY LENGTH(event_name) DESC LIMIT 1"
  else
    printf "Unknown database version '%s', unable to continue." $(rdDatabaseVersion)
    return 1
  fi

  ev_name_width="$(doSQL ${l_query})"
  event_count="$(doSQL ${c_query})"
  printf '%3d Events for Clock "%s"\n' "${event_count}" "${full_name//_/ }"

  # doSQL() output is <TAB>-separated, set IFS to a single <TAB>.
  IFS="	"
  doSQL "${query}" | while read -r event_name start_time time_type length ; do
    event_end=$((start_time + length))
    printf "\t* %${ev_name_width}s at %5s for %5s (ending at %5s)\n" \
	   "${event_name//_/ }" \
	   $( { ((time_type)) && print 'T\c' ; } || print ' \c' )$(ms2HMS "${start_time}") \
	   $(ms2HMS "${length}") \
	   $(ms2HMS "${event_end}")
  done

  return 0
}

############# BEGIN external shell commands used in this script. #############
# This script uses these 4 external commands.
# Look for them in their upper case, parameter expanded form.
typeset -a our_commands
our_commands=( cat column fmt getopt )
# Find the executables we need; this uses some basic shell and a ZSH trick:
# the (U) in the eval says to evaluate the parameter as all upper case
# letters. This snippet generates shell parameters representing the upper case
# equivalent of the command names and sets the parameter values to the full path
# of the commands.
# Refresh this segment in Emacs by marking the appropriate region (or the whole
# buffer with C-xH) and replacing it with C-uM-|mk-ourCommands (shell-command-on-region).
for C in ${our_commands[*]} ; do
  # shellcheck disable=SC2154 # ZSH: ${path} is set by the shell.
  for D in ${path} ; do
    # shellcheck disable=SC2140,SC2086 # we need the quotes
    [[ -x "${D}/${C}" ]] && { eval "${(U)C//-/_}"="${D}/${C}" ; break ; }
  done
  [[ -x $(eval print \$"${(U)C//-/_}") ]] || { print "Cannot find ${C}! Done."; return 1 ; }
done
unset our_commands
############## END external shell commands used in this script. ##############

# Get zsh functions necessary for this script.
if [[ -r "/usr/local/bin/zsh-functions" ]] ; then
  source "/usr/local/bin/zsh-functions"
elif [[ -r "/usr/bin/zsh-functions" ]] ; then
  source "/usr/bin/zsh-functions"
else
  exit $(error "Cannot find support library 'zsh-functions'. Please consult your astrologist!")
fi

BOLD="${bold_color}"
NORM="${reset_color}"

if ! TEMP=$(${GETOPT} -o ahvV --long all,help,verbose,version -n ${0:t} -- "${@}") ; then
  print "getopt(1) Fatal Error (${?}). Terminating..." >&2
  return 1
fi
eval set -- "${TEMP}"
while :
do
  case "${1}" in
    -a|--all) SHOW_ALL=1 ; shift ;;
    -h|--help) usage ${0:t} ; exit ;;
    -V|--version) show_version=1 ; shift ;;
    -v|--verbose) VERBOSE=1 ; shift ;;
    --) shift ; break ;;
    *) echo "${BOLD}Internal error!${NORM}" ; exit 1 ;;
  esac
done
unset TEMP

if ((show_version)) ; then
  echo "${0##*/}: version ${v_major}.${v_minor}.${v_patch}-${${v_hash#\$Hash: }%$}"
  exit 0
fi

# IFS must be just <Tab> and <Newline>.
IFS="	
"

# Figure out which schema we are using for Clocks and Events.
typeset -a rivendell_clock_list
if okDatabaseStructure CLOCKS:name,SERVICE_CLOCKS:hour+clock_name ; then
  # SC2207: mapfile behaves differently in ZSH from Bash
  # shellcheck disable=SC2190,SC2207
  rivendell_clock_list=( $(doSQL "SELECT name FROM CLOCKS order by name") )
else
  # Don't really know what else to do here...
  printf "Unknown database schema version (%03d). I give up." $(rdDatabaseVersion)
  exit 1
fi

if (( SHOW_ALL )) ; then  
  # Display all the Clocks.
  for clock in ${rivendell_clock_list[*]} ; do
    show_clock "${clock}" "${VERBOSE}"
    echo
  done
elif [[ -n "${1}" ]] ; then
  if [[ "${(L)1}" = 'list' ]] ; then
    echo "Current list of CLOCKs:"
    # (F) joins array elements with newline separator.
    # SC2153: COLUMN is not a misspelling
    # shellcheck disable=SC2153
    echo "${(F)rivendell_clock_list}" | "${COLUMN}" -x -c "${COLUMNS}"
    read -r clock\?"Enter a Clock to list: "
  else
    clock="${1}"
  fi

  if valid_clock "${rivendell_clock_list[*]}" "${clock}" ; then
    show_clock "${clock}" "${VERBOSE}"
  fi
else
  usage "${0:t}"
fi
    
exit

# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: + ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***

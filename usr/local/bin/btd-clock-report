#!/bin/zsh
# shellcheck shell=bash disable=SC1105,SC2046,SC2048,SC2079,SC2086,SC2089,SC2090,SC2154,SC2296,SC2312
# SC1105: using (( )) correctly for ZSH
# SC2046: we do not care about the word splitting in unquoted $() expansion
# SC2048: shellcheck aggressive quoting recommendations
# SC2079: ZSH arithmetic expressions can do floating point
# SC2086: all instances of parameters are double-quoted the way I want them
# SC2089: quotes are working the way we want
# SC2090: quotes are working the way we want
# SC2154: reference parameters are set by ZSH for us
# SC2296: ZSH param expansion can begin with (
# SC2312: shellcheck aggressive 'invoke separately'

##############################################################################
##############################################################################
##
## btd-clock-report - Display the events for one or more Rivendell Clocks on
##                    stdout.
##
##############################################################################
##############################################################################

setopt NO_CASE_MATCH
zmodload zsh/regex
zmodload zsh/datetime
zmodload zsh/terminfo
zmodload zsh/stat
autoload colors
colors

# This script complies with Semantic Versioning: http://semver.org/
v_major=0
v_minor=3
v_patch=5
# SC2016: $Hash is not a variable, it's a token that gets replaced by git(1)
# shellcheck disable=SC2016
v_hash='$Hash$'

##############################################################################
## Locally defined subroutines
##############################################################################

# How to use this command.
function usage() {
  local my_name="${1:t}"

  "${CAT}" << EOF
$(${FMT} <<<"${my_name}: display events for the named Rivendell Clock (or all Clocks) on STDOUT (aka, the terminal)")

Summary
"${my_name}" [ --version (-V) ] [ --verbose (-v) ] [ --csv ]
                 --service <Service_Name> || --all || <Clock_Name> || "list"

Description
$(${FMT} <<<"${my_name} formats and dumps the contents of the named Clock. Use the word 'list' to see a list of Clock names.")

$(${FMT} <<<"The --all option causes ${my_name} to display all Rivendell Clocks to STDOUT.")

$(${FMT} <<<"The --service <Service_Name> option causes ${my_name} to display all Rivendell Clocks for <Service_Name> to STDOUT (in hour-number order).")

$(${FMT} <<<"The --csv option causes ${my_name} to display the output in comma separated values format.")

$(${FMT} <<<"The --verbose option enables more chattiness in the operation. ${my_name} sends diagnostic output to the standard error (STDERR) channel.")

EOF
}

# Throw an error and return an unsuccessful return code.
function error() {
  local message="${1}"

  "${FMT}" >&2 <<EOF

${RED}ERROR:${NORM} ${message}

EOF
  printf '%d\n' 254
  return 254
}

# valid_clock() checks the named Clock for validity. Returns true or
# false based on the regex match test.
function valid_clock() {
  local defined_clocks="${1}" ; shift
  local requested_clock="${1}" ; shift

  [[ "${defined_clocks}" =~ .*${requested_clock}.* ]]
}

# show_clock() displays all the Events in the named Clock along with its title.
function show_clock() {
  local full_name="${1}" ; shift
  local -i VERBOSE="${1}"

  local query l_query c_query
  local -i ev_name_width event_count cl_length
  local -i cl_start_time event_end
  local -i e_time_type
  local cl_event_name
  local clk_name="${full_name// /_}_CLK"

  # The pre-version-300 clocks structure
  if okDatabaseStructure "${clk_name}:event_name+start_time+length" "${VERBOSE}" ; then
    query="select EVENT_NAME, START_TIME, LENGTH from \`${clk_name}\` order by START_TIME asc"
    c_query="select count(*) from \`${clk_name}\`"
    l_query="select max(length(EVENT_NAME)) from \`${clk_name}\`"
  # The post-version-300 clocks structure
  elif okDatabaseStructure CLOCK_LINES:clock_name+event_name+start_time+length,EVENTS:time_type,EVENT_LINES:type+event_type+cart_number+trans_type+marker_comment,SERVICE_CLOCKS:clock_name+service_name "${VERBOSE}" ; then
    query="select cl.EVENT_NAME, cl.START_TIME, cl.LENGTH, e.TIME_TYPE, "
    query+="el.TYPE, el.EVENT_TYPE, el.CART_NUMBER, el.TRANS_TYPE, "
    query+="ca.TITLE "
    query+="from CLOCK_LINES as cl "
    query+="join EVENTS as e on cl.EVENT_NAME = e.NAME "
    query+="join EVENT_LINES as el on el.EVENT_NAME = e.NAME "
    query+="join CART as ca on el.CART_NUMBER = ca.NUMBER "
    query+="where cl.CLOCK_NAME='${full_name}' "
    query+="order by START_TIME asc"
    c_query="select count(*) from CLOCK_LINES where CLOCK_NAME='${full_name}'"
    l_query="select max(length(EVENT_NAME)) from CLOCK_LINES where CLOCK_NAME='${full_name}'"
  else
    return $(error $(printf "Unknown database version '%s', unable to continue." $(rdDatabaseVersion)))
  fi

  ev_name_width="$(doSQL ${l_query})"
  event_count="$(doSQL ${c_query})"

  printf '%d Events for Clock "%s"\n' "${event_count}" "${full_name}"

  # doSQL() output is <TAB>-separated, set IFS to <TAB> and <NEWLINE> because
  # some of the data may contain <SPACE>s.
  oIFS="${IFS}"
  IFS=$'\t\n'
  ((VERBOSE)) && print "QUERY: ${query}" >&2

  # SC2034: parameters are reserved for future use.
  # shellcheck disable=SC2034
  doSQL "${query}" | while read -r cl_event_name cl_start_time cl_length e_time_type el_type el_event_type el_cart_number el_trans_type ca_title ; do
    event_end=$((cl_start_time + cl_length))
    # see lib/rdlog_line.h: enum TimeType {Relative=0,Hard=1,NoTime=255};
    case "${e_time_type}" in
      0) tt=' ' ;;
      1) tt='H' ;;
      255) tt='N' ;;
      *) tt='?' ;;
    esac
    # see lib/rdlog_line.h: enum TransType {Play=0,Segue=1,Stop=2,NoTrans=255};
    case "${el_trans_type}" in
      0) ett='P' ;;
      1) ett='G' ;;
      2) ett='S' ;;
      255) ett='N' ;;
      *) ett='?' ;;
    esac
    if ((CSV)) ; then
      printf ',"%s","%1s%5s","%5s",%d,"%s","%1s"\n' \
	     "${cl_event_name}" \
	     "${tt}" $(ms2HMS "${cl_start_time}") \
	     $(ms2HMS "${event_end}") \
	     "${el_cart_number}" \
	     "${ca_title}" \
	     "${ett}"
    else
      printf "\t* %${ev_name_width}s %1s%5s to %5s Cart: %06d (%s) Trans: %1s\n" \
	     "${cl_event_name//_/ }" \
	     "${tt}" $(ms2HMS "${cl_start_time}") \
	     $(ms2HMS "${event_end}") \
	     "${el_cart_number}" "${ca_title}" \
	     "${ett}"
    fi
  done
  IFS="${oIFS}"

  return 0
}

############# BEGIN external shell commands used in this script. #############
# This script uses these 4 external commands.
# Look for them in their upper case, parameter expanded form.
typeset -a our_commands
our_commands=( cat column fmt getopt )
# Find the executables we need; this uses some basic shell and a ZSH trick:
# the (U) in the eval says to evaluate the parameter as all upper case
# letters. This snippet generates shell parameters representing the upper case
# equivalent of the command names and sets the parameter values to the full path
# of the commands.
# Refresh this segment in Emacs by marking the appropriate region (or the whole
# buffer with C-xH) and replacing it with C-uM-|mk-ourCommands (shell-command-on-region).
for C in ${our_commands[*]} ; do
  # shellcheck disable=SC2154 # ZSH: ${path} is set by the shell.
  for D in ${path} ; do
    # shellcheck disable=SC2140,SC2086 # we need the quotes
    [[ -x "${D}/${C}" ]] && { eval "${(U)C//-/_}"="${D}/${C}" ; break ; }
  done
  [[ -x $(eval print \$"${(U)C//-/_}") ]] || { print "Cannot find ${C}! Done."; return 1 ; }
done
unset our_commands
############## END external shell commands used in this script. ##############

# Get zsh functions necessary for this script.
if [[ -r "/usr/local/bin/zsh-functions" ]] ; then
  source "/usr/local/bin/zsh-functions"
elif [[ -r "/usr/bin/zsh-functions" ]] ; then
  source "/usr/bin/zsh-functions"
else
  exit $(error "Cannot find support library 'zsh-functions'. Please consult your astrologist!")
fi

typeset BOLD="${bold_color}"
typeset NORM="${reset_color}"

typeset -i SHOW_VERSION=0
typeset -i VERBOSE=0
typeset -i CSV=0
typeset SERVICE=""

if ! TEMP=$(${GETOPT} -o ahvV --long all,csv,help,service:,verbose,version -n ${0:t} -- "${@}") ; then
  print "getopt(1) Fatal Error (${?}). Terminating..." >&2
  return 1
fi
eval set -- "${TEMP}"
while :
do
  case "${1}" in
    -a|--all) SHOW_ALL=1 ; shift ;;
    --csv) CSV=1 ; shift ;;
    -h|--help) usage ${0:t} ; exit ;;
    --service) SERVICE="${2}" ; shift 2 ;;
    -V|--version) SHOW_VERSION=1 ; shift ;;
    -v|--verbose) ((VERBOSE += 1)) ; shift ;;
    --) shift ; break ;;
    *) echo "${BOLD}Internal error!${NORM}" ; exit 1 ;;
  esac
done
unset TEMP

if ((SHOW_VERSION)) ; then
    typeset commit_hash="${v_hash}"
    # SC2016 (info): Expressions don't expand in single quotes... $Hash$ is not a parameter expansion.
    # shellcheck disable=SC2016
    [[ "${v_hash}" == '$Hash$' ]] &&
        commit_hash="prerelase"
    # SC2299: ZSH handles nested parameter expansion.
    # shellcheck disable=SC2299
    print "${0:t}: version ${v_major}.${v_minor}.${v_patch}-${${commit_hash#\$Hash: }%$}"
    exit 0
fi

typeset clock

# IFS must be just <Tab> and <Newline>.
IFS=$'\t\n'

# Figure out which schema we are using for Clocks and Events,
# and get the list of Clocks.
typeset -a rivendell_clock_list
if okDatabaseStructure CLOCKS:name,SERVICE_CLOCKS:hour+clock_name+service_name ; then
  typeset query
  query="select distinct c.NAME from CLOCKS as c "
  query+="join SERVICE_CLOCKS as sc on c.NAME = sc.CLOCK_NAME "
  # Limit the query to a specific service if requested.
  if [[ -n "${SERVICE}" ]] ; then
    query+="where SERVICE_NAME = '${SERVICE}' "
  fi
  query+="order by sc.SERVICE_NAME, sc.HOUR"
  ((VERBOSE)) && printf "clock name query: '%s'\n" "${query}" >&2
  # SC2207: mapfile behaves differently in ZSH from Bash
  # shellcheck disable=SC2190,SC2207
  rivendell_clock_list=( $(doSQL "${query}") )
else
  # Don't really know what else to do here...
  exit $(error "Unknown database schema version ($(rdDatabaseVersion)). I give up.")
fi
((VERBOSE)) && printf "Found %d Clocks\n" "${#rivendell_clock_list}" >&2

# Choices are either a) show a specific clock, b) show all clocks for
# the named service, or c) all clocks.
if ((SHOW_ALL)) ; then
  # Display all the Clocks.
  for clock in ${rivendell_clock_list[*]} ; do
    show_clock "${clock}" "${VERBOSE}"
    ((CSV)) || print
  done
  exit
fi
if [[ -n "${SERVICE}" ]] ; then
  # Display all the Clocks.
  for clock in ${rivendell_clock_list[*]} ; do
    show_clock "${clock}" "${VERBOSE}"
    ((CSV)) || print
  done
  exit
fi

if [[ "${1}" == 'list' ]] ; then
  print "Current list of CLOCKs:"
  # (F) joins array elements with newline separator.
  # SC2153: COLUMN is not a misspelling
  # shellcheck disable=SC2153
  print "${(F)rivendell_clock_list[*]}" | "${COLUMN}" -x -c "${COLUMNS}"
  read -r clock\?"Enter a Clock to list: "
else
  clock="${1}"
fi

if valid_clock "${rivendell_clock_list[*]}" "${clock}" ; then
  show_clock "${clock}" "${VERBOSE}"
fi
    
exit

# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: + ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***

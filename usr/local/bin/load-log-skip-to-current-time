#!/usr/bin/perl -w

##############################################################################
##############################################################################
##
## load-log-skip-to-current-time
##
## Load the named Log, advance to the Event line closest to the
## current time of day.
##
## Originally posted to rivendell-dev by
## Wayne Merricks <waynemerricks@thevoiceasia.com>
## with Subject: "[RDD] Getting Airplay to Auto Play at correct time"
## http://caspian.paravelsystems.com/pipermail/rivendell-dev/2015-November/023621.html
##
##############################################################################
##############################################################################

package main;

use strict;
use v5.10;

use constant vMAJOR => 0;
use constant vMINOR => 3;
use constant vPATCH => 2;
use constant vHASH => '$Hash$';

use Getopt::Long qw(:config no_ignore_case);
use Pod::Usage;
use Time::localtime qw(localtime);
use Data::Dumper;

sub show_version;
sub look_ahead;
sub main;

use constant MAIN_LOG => 1;
use constant AUX_LOG1 => 2;
use constant AUX_LOG2 => 3;

main;

1;

sub show_version {
    my $program_name = shift;

    my $hash = undef;

    ($hash = vHASH) =~ s/\$Hash: //;
    # Handle "prerelease" versions.
    $hash =~ s/\$Hash\$/prerelease/;

    my $version_string =
	vMAJOR . "." .
	vMINOR . "." .
	vPATCH . "-" .
	$hash;

    $program_name =~ s{.*/}{};

    say STDOUT "$program_name: version $version_string";

    exit;
}

# Look ahead in the Log from the candidate position to see if we hit a
# "Hard Start" time, at which point Event start times may "warp" back
# in time. This is expected when a Clock is over-filled and we
# encounter an Event with a Timed Start.
#
# Return the new Log line_id (which will be zero if time did not
# "warp").
sub look_ahead {
    my $log_lines = shift;
    my $candidate_line_index = shift;
    my $current_seconds_past_midnight = shift;
    my $verbose = shift;

    my ($time_warp, $new_line_id) = (0, 0);

    my ($line_id, $start_time, $rest_of_line) = (undef, undef, undef);
    my ($next_line_id, $next_start_time, $next_rest_of_line) = (undef, undef, undef);

    # Consider Log lines starting with the line after our candidate
    # line. Iterate until we either a) find a time greater than the
    # candidate *after* a time less than the candidate, or b) have
    # looked ahead more than ten minutes (which is kind of an
    # arbitrary amount of time).
    #
    # We do this in order to handle overfilled Clocks in which there
    # are one or more Timed Start Events. We need to see if the start
    # time of an Event *after* a Timed Start is close to the current
    # time.
    for (my $i = $candidate_line_index + 1; $i < scalar @$log_lines; $i++) {
	($line_id, $start_time, $rest_of_line) = split(' ', $log_lines->[$i]);
	if ($start_time =~ m/T/) {
	    # Found a timed start event. Start times may now be
	    # earlier than previous.
	    printf STDERR "look_ahead: got a Timed Event (%s): line_id:%4d (index:%4d)\n",
		$start_time, $line_id, $i if ($verbose);
	    $time_warp = 1;
	    $start_time =~ s/T//;
	}
	my ($hh, $mm, $ss) = split(/:/, $start_time);
	my $start_time_seconds = ($hh * 3600) + ($mm * 60) + $ss;

	# Stop iterating if we have looked ahead more than ten minutes.
	if ($start_time_seconds > ($current_seconds_past_midnight + 600)) {
	    # We have looked 10 minutes forward, time may or may not
	    # have warped.
	    if ($verbose) {
		my $warp_msg = "did not warp)";
		$warp_msg = "warped)" if ($time_warp);
		printf STDERR "look_ahead: looked 10 minutes ahead of line index %d (time %s\n",
		    $candidate_line_index, $warp_msg;
	    }
	    last;
	}

	# Get the *next* Log Line. We check its start time for being
	# later than the current wall-clock time.
	($next_line_id, $next_start_time, $next_rest_of_line) = split(' ', $log_lines->[$i + 1]);
	$next_start_time =~ s/T//;
	($hh, $mm, $ss) = split(/:/, $next_start_time);
	my $next_start_time_seconds = ($hh * 3600) + ($mm * 60) + $ss;

	if ($time_warp) {
	    if ($next_start_time_seconds > $current_seconds_past_midnight) {
		$new_line_id = $line_id;
		printf STDERR "look_ahead: Time warped: NEW line ID: %d\n", $new_line_id if ($verbose);
		last;
	    }
	}
    }
    return $new_line_id;
}

sub main {
    my ($dry_run, $log_machine, $immediate, $verbose, $version, $man, $help) =
	(undef, MAIN_LOG, undef, 0, undef, undef, undef);

    my $now = localtime();
    my $current_seconds_past_midnight = ($now->hour() * 3600) + ($now->min() * 60) + $now->sec();

    my $log_name = undef;
    my @complete_log_lines = ();
    my $line_index = 0;
    my ($last_line_id, $last_start_time) = (undef, undef);
    my $immediate_macro = undef;

    GetOptions(
	'dry-run|d'       => \$dry_run,
	'log-machine|l=i' => \$log_machine,
	'immediate|i'     => \$immediate,
        'help|?|h'        => \$help,
        'man|m'           => \$man,
        'verbose|v+'      => \$verbose,
	'version|V'       => \$version,
        ) || pod2usage( 2 );

    pod2usage(-verbose => 0, -output  => \*STDERR) if ($help);
    pod2usage(-verbose => 3, -output  => \*STDERR) if ($man);
    show_version($0) if ($version);

    $log_name = shift(@ARGV);
    unless ($log_name) {
	say STDERR "Missing Log name. Please name a Log to load.";
	pod2usage(-verbose => 0, -output =>\*STDERR);
    }

    if ($log_machine > 0) {
	if ($log_machine > 3) {
	    say STDERR "Valid values for Log Machine are 1, 2, and 3.";
	    pod2usage(1);
	}
    }

    if ($verbose) {
	my $right_now = sprintf("%02d:%02d:%02d", $now->hour, $now->min, $now->sec);
	printf STDERR "Current time: %s, %d seconds past midnight\n",
	    $right_now, $current_seconds_past_midnight;
    }

    # This results in @complete_log_lines containing lines like:
    #   0 T00:00:00  SEGUE  000002   Legal         :07  Welcome to RAM
    #   1  00:00:06  SEGUE  010249   Music        6:08  Deja Voodoo
    #   2  00:06:10  SEGUE  010084   Music        3:12  Cataracts
    #   3  00:08:57  SEGUE  010292   Music        4:01  Wrote a Song for Everyone
    #   4  00:12:50  SEGUE  010481   Music        3:46  That's All Right
    # ...
    @complete_log_lines = `echo "load $log_name\nlist\nquit" | rdclilogedit --silent`;
    if (scalar @complete_log_lines == 0) {
	printf STDERR "Unable to load Log '%s'\n", $log_name;
	exit;
    }
    chomp @complete_log_lines;
    # Turns out we sometimes see blank lines in rdclilogedit(1) output .
    @complete_log_lines = grep {!/^$/} @complete_log_lines;
    print STDERR Dumper @complete_log_lines if ($verbose > 2);

    my ($line_id, $start_time, $rest_of_line) = (undef, undef, undef);
    my $hhmmss = undef;
    my ($next_line_id, $next_start_time, $next_rest_of_line) = (undef, undef, undef);
    my $new_line_id = 0;

    # Iterate over the entire Log, looking for Event start times later
    # than the current wall-clock time. Our candidate is the Event
    # just before that which is scheduled to start later than the
    # current time.
    foreach my $log_line (@complete_log_lines) {
	printf STDERR "\t%s\n", $log_line if ($verbose > 1);
	next if ($log_line =~ /---/);
	($line_id, $start_time, $rest_of_line) = split(' ', $log_line);
	($next_line_id, $next_start_time, $next_rest_of_line) = split(' ', $complete_log_lines[$line_index + 1]);
	last if ($next_start_time =~ /---/);
	($hhmmss = $start_time) =~ s/T//;
	$next_start_time =~ s/T//;
	my ($hh, $mm, $ss) = split(/:/, $hhmmss);
	my $start_time_seconds = ($hh * 3600) + ($mm * 60) + $ss;
	($hh, $mm, $ss) = split(/:/, $next_start_time);
	my $next_start_time_seconds = ($hh * 3600) + ($mm * 60) + $ss;

	# If the next Event is scheduled to start after the current
	# wall-clock time, *this* Event (Log Line) is our candidate.
	last if ($next_start_time_seconds > $current_seconds_past_midnight);

	$line_index++;
    }
    printf STDERR "main: (before look ahead) Candidate line %4d (index:%4d): %s\n",
	$line_id, $line_index, $complete_log_lines[$line_index] if ($verbose);

    # Look ahead for a time warp only if the candidate Log Line is not
    # a timed start.
    if ($start_time =~ m/^\d/) {
	if (($new_line_id = look_ahead(\@complete_log_lines, $line_index, $current_seconds_past_midnight, $verbose)) > $line_id) {
	    $line_id = $new_line_id;
	}
    }

    printf STDERR "main: Chose line ID %4d\n", $line_id if ($verbose);

    # Load the Log, and skip to the current time.
    # Detailed explanation:
    # PW $log_machine!               Set the RDAirPlay right-hand widget to display
    #                                the requested Log Machine (1: Main Log, 2: AuxLog 1,
    #                                3: AuxLog 2).
    # LL $log_machine $log_name -1!  Load Log $log_name into $log_machine and set the
    #                                start line to -1 (nothing).
    # MN $log_machine $line_id!      Make $line_id in $log_machine the next line to play.
    # PN $log_machine!               Play Next line (see previous step) in $log_machine
    #                                (only if --immediate was specified on the command line).
    # PM 2 $log_machine!             Set the Log Machine Play Mode to 'Automatic'.
    my @macros = (
	qq(PW $log_machine!),
	qq(LL $log_machine $log_name -1!),
	qq(MN $log_machine $line_id!),
	);
    push(@macros, qq(PN $log_machine!)) if ($immediate);
    push(@macros, qq(PM 2!));

    if ($verbose or $dry_run) {
	print qq(Would have run the following command:\n) if ($dry_run);
	print qq(rmlsend --from-file=-\n);
	print join(qq(\n), @macros), qq(\n);
	return if ($dry_run);
    }

    open(my $ph, "|-", "rmlsend --from-file=-")
	or die "Cannot open pipe to rmlsend --from-file=- ($!). Stopped";
    print $ph join(qq(\n), @macros, qq(\n));
    close($ph);
}

1;

__END__;

=head1 NAME

load-log-skip-to-current-time - Load the named Log and play starting at the current time of day

=head1 SYNOPSIS

  load-log-skip-to-current-time [ --help (-h) ]
                                [ --man (-m) ]
                                [ --version (-V) ]
                                [ --verbose (-v) ]
                                [ --dry-run (-d) ]
                                [ --log-machine (-l) <LogMachine> ]
                                E<lt>LogNameE<gt>

 --dry-run (-d)       show what would happen without actually doing it
 --log-machine (-l)   load the named Log in the specified Log Machine
                      (1, 2, or 3)
 --immediate (-i)     immediately start playing the chosen Event,
                      possibly interrupting current playout
 --help (-h)          show a brief help message
 --man (-m)           display the full documentation for this command
 --version (-V)       show the program version and exit
 --verbose (-v)       run in 'verbose' mode

=head1 OPTIONS

=over 8

=item B<--help (-h)>

Display a brief help message and exit.

=item B<--man (-M)>

Display the complete manual page and exit.

=item B<--verbose (-v)>

Run in verbose mode. Use multiple times for more verbosity. Verbose
messages are directed to STDERR.

=item B<--version (-V)>

Display this program's version and exit.

=item B<--dry-run (-d)>

Display what would happen, but do not actually load a Log.

=item B<--log-machine (-l) E<lt>LogMachineE<gt>>

Load the named Log in the Main Log (1, the default), AuxLog 1 (2), or
AuxLog 2 (3) position.

=item B<--immediate (-i)>

Start the Log immediately after loading. The chosen Log line is simply
"made next" if this option is not specified.

=item B<E<lt>LogNameE<gt>>

Load the specified Rivendell Log.

=back

=head1 DESCRIPTION

B<load-log-skip-to-current-time> loads the named Log and starts
playing at the nearest line not later than the current time of day.

After choosing a "candidate" Log Line,
B<load-log-skip-to-current-time> looks ahead in the Log for Timed
Events. If a Timed Event is found within ten minutes of the
"candidate", B<load-log-skip-to-current-time> looks further ahead for
an event that starts later than the current time.

The Event chosen is the Event immediately preceeding the Event with a
Start Time later than the current time of day.

=head1 SEE ALSO

=over 8

=item B<rdclilogedit(1)>

=item B<rdlogedit(1)>

=item B<rdairplay(1)>

=back

#!/bin/zsh
# shellcheck shell=bash disable=SC2086,SC2128,SC2162,SC2178

# This script tests all the functions in zsh-functions, one by one.

# shellcheck disable=SC1090
. ${DIR:-.}/zsh-functions

echo "zsh_library_version: \c"
x=$(zsh_library_version)
[[ -n "${x}" ]] || echo "Missing info!"
[[ "${x}" =~ [[:digit:]]{1,2}\.[[:digit:]]{1,2}\.[[:digit:]]{1,2}\.[[:digit:]]{1,2} ]] &&
  echo "${x}" || echo "Improper version string!"
read -q ok\?"Press a key to continue: "
unset x

echo "doSQL select count(*) from CART: \c"
x=$(doSQL "select count(*) from CART")
if ! [[ "${x}" =~ [[:digit:]]+ ]] ; then
  echo "${x}" invalid
else
  echo "${x}"
fi
read -q ok\?"Press a key to continue: "
unset x

echo "rdDatabaseVersion: \c"
x=$(rdDatabaseVersion)
read -q ok\?"Database version is '${x}'. Press a key to continue: "
unset x

echo "okDatabaseStructure: expect VALID structure (0): \c" && read -q ok\?"Press a key to continue: "
okDatabaseStructure CART:number,CUTS:cart_number+cut_name+length
x=${?}
read -q ok\?"database structure is '${x}'. Press a key to continue: "
unset x

echo "okDatabaseStructure: expect INVALID structure (non-0): \c" && read -q ok\?"Press a key to continue: "
okDatabaseStructure CART:name+group_name+title,CUTS:number+cut_name+duration
x=${?}
read -q ok\?"database structure is '${x}'. Press a key to continue: "
unset x

echo "getMyIPAddresses: \c"
# shellcheck disable=SC2207
x=( $(getMyIPAddresses) )
read -q ok\?"My IP address is '${x}'. Press a key to continue: "
unset x

echo "rdGetStationName: \c"
x=$(rdGetStationName)
read -q ok\?"Station name is '${x}'. Press a key to continue: "
unset x

echo "rdGetWebServer: \c"
x=$(rdGetWebServer)
read -q ok\?"Web Server is '${x}'. Press a key to continue: "
unset x

# List Services requires no curl argument.
echo "rdWebInvoke '21' (RDXPORT_COMMAND_LISTSERVICES): \c"
x="$(rdWebInvoke 1 21)"
echo "${x}"
read -q ok\?"Press a key to continue: "
unset x

echo "rdListsGroups: \c"
x="$(rdListGroups)"
echo "${x}"
read -q ok\?"Press a key to continue: "
unset x

echo "rdListAllCarts ${group:-Music} 1 (with line count): \c"
x="$(rdListAllCarts ${group:-Music} 1)"
echo "${x}" | wc -l
read -q ok\?"Press a key to continue: "
unset x

echo "rdListCart 1002: \c" && read -q ok\?"Press a key to continue: "
((VERBOSE)) && setopt xtrace
# without cuts, not verbose
x="$(rdListCart 1002)"
# without cuts, not verbose, explicit
x="$(rdListCart 1002 0 0)"
# with cuts, not verbose
x="$(rdListCart 1002 1 0)"
# with cuts, verbose
x="$(rdListCart 1002 1 1)"
# without cuts, verbose
x="$(rdListCart 1002 0 1)"
setopt noxtrace
read -q ok\?"Press a key to continue: "
unset x

echo "rdListCuts 1002 (with line count): \c" && read -q ok\?"Press a key to continue: "
x="$(rdListCuts 1002 1)"
echo "${x}" | wc -l
read -q ok\?"Press a key to continue: "
unset x

echo "rdCartNumberFromTitle 'Drop this CART': \c" && read -q ok\?"Press a key to continue: "
x=$(rdCartNumberFromTitle "Drop this CART" 1)
unset x
# Case sensitivity?
echo "rdCartNumberFromTitle 'drop this cart': \c" && read -q ok\?"Press a key to continue: "
x="$(rdCartNumberFromTitle "drop this cart" 1)"
read -q ok\?"Press a key to continue: "
unset x

echo "rdCartTitleFromPartial 'drop this': \c" && read -q ok\?"Press a key to continue: "
x="$(rdCartTitleFromPartial "drop this" 1)"
read -q ok\?"Press a key to continue: "
unset x

echo "rdCartTitleFromNumber 999901: \c" && read -q ok\?"Press a key to continue: "
x="$(rdCartTitleFromNumber 999901 1)"
read -q ok\?"Press a key to continue: "
unset x

echo "rdCartGroupFromNumber 999901: \c" && read -q ok\?"Press a key to continue: "
x=$(rdCartGroupFromNumber 999901 1)
read -q ok\?"Press a key to continue: "
unset x

echo "rdMaxCartNumberForGroup ${group:-Music}: \c" && read -q ok\?"Press a key to continue: "
x=$(rdMaxCartNumberForGroup "${group:-Music}" 1)
read -q ok\?"Max Cart Number for Group '${group:-Music}' is '${x}'. Press a key to continue: "
unset x

echo "rdGetNextCartNumber ${group:-Music}: \c" && read -q ok\?"Press a key to continue: "
x=$(rdGetNextCartNumber "${group:-Music}" 1)
read -q ok\?"Next Cart Number for Group '${group:-Music}' is '${x}'. Press a key to continue: "
unset x

echo "rdDropboxStatus test 1 1: \c" && read -q ok\?"Press a key to continue: "
((VERBOSE)) && setopt xtrace
rdDropboxStatus test 1 1
setopt noxtrace
read -q ok\?"Press a key to continue: "

# test with a known good prefix
echo "rdGetDropboxIDFromPath test /var/snd/kuchota/rdimport-dropbox/SynNews/2020Talks: \c" &&
  read -q ok\?"Press a key to continue: "
dropbox_id=$(rdGetDropboxIDFromPath test /var/snd/kuchota/rdimport-dropbox/SynNews/2020Talks 1 1)
# test with a known invalid prefix
echo "rdGetDropboxIDFromPath test /var/tmp: \c" &&
  read -q ok\?"Press a key to continue: "
x="$(rdGetDropboxIDFromPath test /var/tmp 1 1)"
read -q ok\?"Press a key to continue: "
unset x

# reset a dropbox
echo "rdResetDropbox test ${dropbox_id} 1 1" && read -q ok\?"Press a key to continue: "
((VERBOSE)) && setopt xtrace
rdResetDropbox test "${dropbox_id}" 1 1 || echo "rdResetDropbox unsuccessful."
setopn noxtrace
read -q ok\?"Press a key to continue: "
unset dropbox_id

echo "logit test 1 'This is an interactive logit test.': \c" && read -q ok\?"Press a key to continue: "
x=$(logit test 1 "This is an interactive logit test.")
echo "logit test 0 'This is a non-interactive logit test.': \c" && read -q ok\?"Press a key to continue: "
x=$(logit test 0 "This is a non-interactive logit test.")
read -q ok\?"Press a key to continue: "
unset x

echo "rdCreateEmptyCart ${testgroup:-TEST} 'Drop this CART Too': \c" && read -q ok\?"Press a key to continue: "
x=$(rdCreateEmptyCart "${testgroup:-TEST}" "Drop this CART Too" 1)
echo "Created Empty Cart '${x}' in Group '${testgroup:-TEST}'." && read -q ok\?"Press a key to continue: "
cart_number_to_drop=$(rdCartNumberFromTitle "drop this cart too" 0)
unset x

# THIS IS DESTRUCTIVE!
echo "rdDropCut 999007 1 1: \c" && read -q ok\?"THIS IS DESTRUCTIVE: Press a key to continue: "
rdDropCut  999007 1 1
read -q ok\?"Press a key to continue: "
# THIS IS DESTRUCTIVE!
echo "rdDropCart ${cart_number_to_drop} 1: \c" && read -q ok\?"THIS IS DESTRUCTIVE: Press a key to continue: "
rdDropCart "${cart_number_to_drop}" 1
unset cart_number_to_drop

echo "sendNotification() without attachment. \c" && read -q ok\?"Press a key to continue: "
x=$(sendNotification test dklann@grunch.org TEST-MESSAGE "This is a test message")
read -q ok\?"Did you get an email at dklann@grunch.org? Press a key to continue: "
unset x
echo "sendNotification() with attachment. \c" && read -q ok\?"Press a key to continue: "
x=$(sendNotification test dklann@grunch.org TEST-MESSAGE-ATTACH "This is a test message" /etc/issue.net)
read -q ok\?"Did you get an email (with attachment) at dklann@grunch.org? Press a key to continue: "
unset x

exit

# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: ++ ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***

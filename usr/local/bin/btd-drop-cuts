#!/bin/zsh
#shellcheck shell=bash disable=SC1105,SC2046,SC2079,SC2086,SC2154
# SC1105: using (( )) correctly for ZSH
# SC2046: We do not care about the word splitting in unquoted $() expansion
# SC2079: ZSH arithmetic expressions can do floating point
# SC2086: all instances of parameters are double-quoted the way I want them
# SC2154: reference parameters are set by ZSH for us

##########################################################################################
##########################################################################################
##
##
## btd-drop-cuts
##
## A Broadcast Tool & Die tool to drop cuts from the specified cart number.
##
##########################################################################################
##########################################################################################

setopt NO_CASE_MATCH
zmodload zsh/regex
zmodload zsh/datetime
zmodload zsh/terminfo
zmodload zsh/stat
autoload colors
colors

# This script complies with Semantic Versioning: http://semver.org/
declare -ri vMajor=0
declare -ri vMinor=3
declare -ri vPatch=1
# SC2016: $Hash is not a variable, it's a token that gets replaced by git(1)
# shellcheck disable=SC2016
declare -r vHash='$Hash$'

# Get zsh functions necessary for this script.
if [[ -r /usr/local/bin/zsh-functions ]] ; then
  source /usr/local/bin/zsh-functions
else
  exit $(error "Cannot read support library '/usr/local/bin/zsh-functions'. Please consult your tarot card reader!")
fi

##########################################################################################
## Locally defined subroutines
##########################################################################################

# How to use this command.
usage() {
  local myName="${1}"

  ${CAT} << EOF
${myName}: drop Cuts from a Cart in the Rivendell library.

SUMMARY

${myName} [ --verbose (-v) ] [ --version (-V) ] [ --dry-run (-d) ]
              [ --keep-evergreen (-k) ]
              { --all (-a) |
                --played (-p) |
                --shorter (-s) <seconds> |
                --import-time (-i) "{older|newer} than <Time Spec>" |
                --last-played (-l) "{older|newer} than <Time Spec>" }
              <Cart Number>

DESCRIPTION

${myName} uses the Rivendell Web API to delete some or all Cuts in
Cart <Cart Number> according to one of the five required
options. Options are:

    --all - drop all Cuts
    --played - drop Cuts with a play count greater than Zero
    --shorter <seconds> - drop Cuts shorter than <seconds> in duration
    --import-time "{older|newer} than <Time Spec>" - drop Cuts imported
      longer ago (older) or more recently than (newer) <Time Spec>
    --last-played "{older|newer} than <Time Spec>" - drop Cuts played longer
      ago (older) or more recently than (newer) <Time Spec>)

Note the time comparisons. You must specify a date/time acceptable to
the date(1) command and must specify a comparison that includes one of
the phrases "older than", "more than", "newer than", or "less than".

Use --keep-evergreen (-k) to avoid dropping Cuts explicitely marked
"Evergreen".

The --verbose (-v) option enables more chattiness in the operation.

The --dry-run option performs everything except actually dropping the
Cuts in the specified Cart.

${myName} sends diagnostic and verbose output to the standard error
(STDERR) channel.

EOF
}

warning() {
  local message="${1}"

  ${FMT} >&2 <<EOF

${YELLOW}WARNING:${NORM} ${message}

EOF
}

error() {
  local message="${1}"

  ${FMT} >&2 <<EOF

${RED}ERROR:${NORM} ${message}

EOF
  echo 254
  return 254
}

##########################################################################################
## Script main line
##########################################################################################

############# BEGIN external shell commands used in this script. #############
# This script uses these 5 external commands.
# Look for them in their upper case, parameter expanded form.
typeset -a our_commands
our_commands=( cat date fmt getopt xmlstarlet )
# Find the executables we need; this uses some basic shell and a ZSH trick:
# the (U) in the eval says to evaluate the parameter as all upper case
# letters. This snippet generates shell parameters representing the upper case
# equivalent of the command names and sets the parameter values to the full path
# of the commands.
# Refresh this segment in Emacs by marking the appropriate region (or the whole
# buffer with C-xH) and replacing it with C-uM-|mk-ourCommands (shell-command-on-region).
for C in ${our_commands[*]} ; do
  # shellcheck disable=SC2154 # ZSH: ${path} is set by the shell.
  for D in ${path} ; do
    # shellcheck disable=SC2140,SC2086 # we need the quotes
    [[ -x "${D}/${C}" ]] && { eval "${(U)C//-/_}"="${D}/${C}" ; break ; }
  done
  [[ -x $(eval print \$"${(U)C//-/_}") ]] || { print "Cannot find ${C}! Done."; return 1 ; }
done
unset our_commands
############## END external shell commands used in this script. ##############

declare -i VERBOSE=0
declare -i DRYRUN=0
declare -i KEEP_EVERGREEN=0
declare DROP_SPEC=
declare MINIMUM_DURATION=
declare IMPORT_DATETIME=
declare IMPORT_OP=
declare LAST_PLAY_DATETIME=
declare LAST_PLAY_OP=

if ! TEMP=$(${GETOPT} -o adhi:kl:ps:Vv --long help,all,dry-run,import-time:,keep-evergreen,last-played:,played,shorter:,version,verbose -n "${0:t}" -- "${@}") ; then
  print "getopt(1) Fatal Error (${?}). Terminating..." >&2
  return 1
fi
eval set -- "${TEMP}"
while : ; do
  case "${1}" in
    -a|--all) DROP_SPEC=all ; shift ;;
    -p|--play*) DROP_SPEC=${DROP_SPEC:+${DROP_SPEC},}played ; shift ;;
    -s|--shor*) DROP_SPEC=${DROP_SPEC:+${DROP_SPEC},}shorter ; MINIMUM_DURATION="${2}" ; shift 2 ;;
    -i|--impor*) DROP_SPEC=${DROP_SPEC:+${DROP_SPEC},}importDatetime ; IMPORT_DATETIME="${2}" ; shift 2 ;;
    -k|--keep*) KEEP_EVERGREEN=1 ; shift ;;
    -l|--last*) DROP_SPEC=${DROP_SPEC:+${DROP_SPEC},}lastPlayDatetime ; LAST_PLAY_DATETIME="${2}" ; shift 2 ;;
    -d|--dry*) DRYRUN=1 ; shift ;;
    -h|--help*) usage ${0:t} ; exit ;;
    -v|--verb*) VERBOSE=1 ; shift ;;
    -V|--vers*) showVersion=1 ; shift ;;
    --) shift ; break ;;
    *) exit $(error "${0:t}: Trouble making sense of options processing. This should not happen. Contact Support.") ;;
  esac
done
unset TEMP

if ((showVersion)) ; then
  echo "${0:t}: version ${vMajor}.${vMinor}.${vPatch}-${${vHash#\$Hash: }%$}"
  exit 0
fi

RED="${fg_bold[red]}"
YELLOW="${fg_bold[yellow]}"
NORM="${reset_color}"

targetCart="${1}"
if [[ -z "${targetCart}" ]] ; then
  exit $(error "Please tell me the CART in which to drop cuts.")
fi
if [[ -z "$(rdListCart ${targetCart} 0 0)" ]] ; then
  exit $(error "CART number '${targetCart}' does not seem to exist in the library.")
fi
if [[ -z "${DROP_SPEC}" ]] ; then
  exit $(error "Please specify one of '--all', '--played', '--shorter', --import-time, or --last-played to drop Cuts for Cart ${targetCart}.")
fi

# Split out the comparison and Time Spec for Import Date and Last
# Played Date.
if [[ -n "${IMPORT_DATETIME}" ]] ; then
  IMPORT_COMPARE=${IMPORT_DATETIME%% than*}
  IMPORT_DATETIME=${IMPORT_DATETIME##*than }
fi
if [[ -n "${LAST_PLAY_DATETIME}" ]] ; then
  LAST_PLAY_COMPARE=${LAST_PLAY_DATETIME%% than*}
  LAST_PLAY_DATETIME=${LAST_PLAY_DATETIME##*than }
fi

echo "Preparing to drop cuts in CART ${targetCart}."

declare cutListXML
declare -A cutList
cutListXML=$(rdListCuts "${targetCart}")
((VERBOSE)) && cutCount=$(echo "${cutListXML}" | ${XMLSTARLET} select --template --value-of 'count(/cutList/cut/cutName)')
((VERBOSE)) && echo "Considering ${cutCount} Cut$( ((cutCount == 0 || cutCount > 1)) && echo 's' ) from Cart '${targetCart}'" >&2
if [[ -n "${cutListXML}" ]] ; then
  # cutList is an associative array keyed by Cut Number, with values
  # containing the colon-separated fields "length" (int), "originDatetime"
  # (int, Epoch seconds), "lastPlayDateTime" (int, Epoch seconds),
  # "playCounter" (int), and "evergreen" (bool).
  # SC2034: cutList is actually used, but in a way shellcheck doesn't know about
  # SC2190: ZSH associative arrays are different from BASH
  # SC2207: ZSH does not prefer "mapfile" or "read -a"
  # shellcheck disable=SC2034,SC2190,2207
  cutList=(
    $(echo "${cutListXML}" |
	${XMLSTARLET} select --template \
		      --match 'cutList/cut' \
		      --value-of 'cutNumber' -o ' ' \
		      --value-of 'length' -o ':' \
		      --if 'originDatetime=""' \
		      --value-of '0' \
		      --else \
		      --value-of 'date:seconds(originDatetime)' -o ':' \
		      --break \
		      --if 'lastPlayDatetime=""' \
		      --value-of '0' \
		      --else \
		      --value-of 'date:seconds(lastPlayDatetime)' \
		      --break \
		      -o ':' \
		      -v 'playCounter' \
		      -o ':' \
		      -v 'evergreen' \
		      --nl)
  )
  ((VERBOSE && cutCount > 10)) && echo >&2

  # ZSH DEPENDENCY: The variable expansion ${(knO)cutList} yields a
  # list of associative array keys (k) (Cut Numbers), sorted in
  # reverse (O) numeric (n) order (highest to lowest). This way, we
  # will drop the highest numbered Cut first, down to the lowest
  # numbered Cut.
  # See the note above about field order.
  declare -a cutColumnList
  # SC2206: We want words to be split, but ZSH mapfile is different from BASH
  # shellcheck disable=SC2206
  for cut in ${(knO)cutList} ; do
    dropThisCut=0
    cutColumnList=( ${(s.:.)cutList[${cut}]} )
    cutLength=${cutColumnList[1]}
    cutImportDate=${cutColumnList[2]}
    cutLastPlayDate=${cutColumnList[3]}
    cutPlayCount=${cutColumnList[4]}
    evergreen=${cutColumnList[5]}

    if eval "${evergreen}" && (( KEEP_EVERGREEN )) ; then
       ((VERBOSE)) && echo "Keeping evergreen Cut '${cut}' in CART '${targetCart}'" >&2
       continue
    fi

    # This loop enables to specify more than one drop option with a
    # single command invocation. It results in logical OR of all the
    # drop options.
    for SPEC in $(eval echo ${DROP_SPEC//,/ }) ; do
      case "${SPEC}" in
	all)
	  dropThisCut=1
	  ((VERBOSE)) && echo "Dropping Cut '${cut}' from Cart '${targetCart}' (dropping all Cuts)." >&2
	  ;;
	importDatetime)
	  case "${(L)IMPORT_COMPARE}" in
	    more|older) IMPORT_OP="<"
		   ;;
	    less|newer) IMPORT_OP=">"
		   ;;
	    *) exit $(error "Unknown comparison '${IMPORT_COMPARE}' for Import date. Cannot continue.")
	       ;;
	  esac
	  # Convert the requested date/time into Epoch Seconds to
	  # match that of the Cut import date/time.
	  if ! dropDatetime=$(${DATE} --date="${IMPORT_DATETIME}" "+%s") ; then
	    exit $(error "Unable to parse date/time '${IMPORT_DATETIME}'. Not dropping cut '${cut}'")
	  fi
	  if (( cutImportDate ${IMPORT_OP} dropDatetime )) ; then
	    ((VERBOSE)) && echo "Dropping Cut '${cut}' from Cart '${targetCart}' (import Datetime $(${DATE} --date=@${cutImportDate})) is ${IMPORT_COMPARE} than $(${DATE} --date=@${dropDatetime})." >&2
	    dropThisCut=1
	  fi
	  ;;
	lastPlayDatetime)
	  case "${(L)LAST_PLAY_COMPARE}" in
	    more|older|'<') LAST_PLAY_OP="<"
		   ;;
	    less|newer|'>') LAST_PLAY_OP=">"
		   ;;
	    *) exit $(error "Unknown comparison '${LAST_PLAY_COMPARE}' for Last Play date. Cannot continue.")
	       ;;
	  esac
	  # Convert the requested date/time into Epoch Seconds to
	  # match that of the Cut last-played date/time.
	  if ! dropDatetime=$(${DATE} --date="${LAST_PLAY_DATETIME}" "+%s") ; then
	    exit $(error "Unable to parse date/time '${LAST_PLAY_DATETIME}'. Not dropping cut '${cut}'")
	  fi
	  # SC2210: the > is not a redirect, shellcheck seems to not
	  # know about arithmetic expressions inside (())
	  # shellcheck disable=SC2210
	  if (( ( cutPlayCount > 0 ) && ( cutLastPlayDate ${LAST_PLAY_OP} dropDatetime ) )) ; then
	    ((VERBOSE)) && echo "Dropping Cut '${cut}' from Cart '${targetCart}' (last-played Datetime $(${DATE} --date=@${cutLastPlayDate}) is ${LAST_PLAY_COMPARE} than $(${DATE} --date=@${dropDatetime}))." >&2
	    dropThisCut=1
	  fi
	  ;;
	played)
	  if (( cutPlayCount > 0 )) ; then
	    ((VERBOSE)) && echo "Dropping Cut '${cut}' from Cart '${targetCart}' (previously played ${cutPlayCount} times)." >&2
	    dropThisCut=1
	  fi
	  ;;
	# MINIMUM_DURATION is in seconds, Cut length in the database
	# is in milliseconds.
	shorter)
	  if (( cutLength < ( MINIMUM_DURATION * 1000 ) )) ; then
	    ((VERBOSE)) && echo "Dropping Cut '${cut}' from Cart '${targetCart}' ($(( cutLength / 1000.)) is shorter than ${MINIMUM_DURATION})." >&2
	    dropThisCut=1
	  fi
	  ;;
	*)
	  warning "${0:t}: unknown SPEC: '${SPEC}' for CART '${targetCart}'. Not dropping cut '${cut}'."
	  ;;
      esac
    done

    if (( dropThisCut )) ; then
      if (( DRYRUN )) ; then
	echo "Would have dropped Cut '${cut}' from Cart '${targetCart}'."
      else
	if ! response=$(rdDropCut "${targetCart}" "${cut}" ${VERBOSE}) ; then
	  warning "${0:t}: Error in dropping Cut '${cut}' from Cart '${targetCart}' (${response}). Please check the Cart with RDLibrary."
	else
	  echo "Successfully dropped Cut '${cut}' from Cart '${targetCart}'."
	fi
      fi
    else
      ((VERBOSE)) && echo "Not dropping Cut '${cut}' from Cart '${targetCart}'." >&2
    fi
  done
else
  error "${0:t}: Did not find any Cuts for Cart '${targetCart}'. Are you sure you wanted to drop Cuts for that Cart?"
fi

exit

# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: ++ ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***

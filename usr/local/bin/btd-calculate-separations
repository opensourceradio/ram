#!/bin/zsh
# shellcheck shell=bash disable=SC2016,SC2086,SC2154,SC2162
# SC2016: The single quotes are inside a double-quoted string
# SC2086: I know about the double-quoting issues
# SC2154: all referenced variables are assigned indirectly
# SC2162: I do not care about read and its backslashes

# btd-calculate-separations
# Calculate Artist and Title (Track) Separations per Event and
# Scheduler Code. Use this to recommend (and optionally update) values
# for Title and Artist Separation in Events that use Scheduler Codes.

zmodload zsh/mathfunc

# Match regular expressions case insensitively.
setopt NO_CASE_MATCH

# This script complies with Semantic Versioning: http://semver.org/
declare -ri v_major=0
declare -ri v_minor=2
declare -ri v_patch=3
declare -r v_hash='$Hash$'

# Get zsh functions necessary for this script.
if [[ -r /usr/bin/zsh-functions ]] ; then
  source /usr/bin/zsh-functions
elif [[ -r /usr/local/bin/zsh-functions ]] ; then
  source /usr/local/bin/zsh-functions
else
  print "Cannot read support library '/usr/local/bin/zsh-functions'. Please consult your astrologist!" >&2
  exit 2
fi

##########################################################################################
## Locally defined subroutines
##########################################################################################

# How to use this command.
usage() {
  myName="${1:t}"

  ${FMT} << EOF

${myName}: Calculate and display Artist and Title Separations for Rivendell Events,
and optionally update the values in the Rivendell database.

SUMMARY
EOF

  ${CAT} << EOF

${myName} [ --verbose (-v) ] [ --version (-V) ]
                          [ --help (-h) ]
                          [ --service (-s) <Rivendell-Service-Name> ]
                          [ --group (-g) <Rivendell-Group-Name> ]
                          [ --set [ --interactive (-i) ]]
EOF
  ${FMT} << EOF

DESCRIPTION

${myName} displays and optionally sets the values for Artist
Separation and Title Separation in Rivendell Events. ${myName}
calculates these values based on the number of unique Artist names and
the number of Carts in Event Groups in the Rivendell database. It also
takes into account the number of times each Event is scheduled during
the course of a week (168 hours).

The actual algorithm ${myName} uses is in the function
recommended_separation().

With no options, ${myName} simply performs the calculations for all
active Events and writes the current settings and the recommended
settings to STDOUT.

You may use the word "list" for the --service (-s) option. This will
cause ${myName} to list the available Services and prompt you for
which one to use. If there is only a single Service, ${myName} will
use that Service even if you specify "list".

Restrict the search for Events to the named Group with the --group
(-g) <Rivendell-Group-Name> option. Like the --service option, you
may use the word 'list' as the Group name and ${myName} will prompt
you for a Group to choose.

Use the "--set" option to set the Artist and Title separations to the
suggested values in the Rivendell database.

Use "--interactive" (or "-i") along with the "--set" option to have
${myName} prompt you for the new values of Artist and Title
separation.

EOF
}

# tracks_per_week() simply counts the number of ${event_name} Events
# in a week that contain the given Scheduler Codes ("Must have code"
# and "And code" settings in RDLogManager->Events)
tracks_per_week() {
  local event_name="${1}"
  
  local query="select count(e.NAME) from SERVICE_CLOCKS sc"
  query="${query} join CLOCK_LINES cl on sc.CLOCK_NAME = cl.CLOCK_NAME"
  query="${query} join EVENTS e on cl.EVENT_NAME = e.NAME"
  query="${query} where e.NAME = '${event_name}'"
  query="${query} order by sc.HOUR"

  if ! okDatabaseStructure SERVICE_CLOCKS:clock_name,CLOCK_LINES:clock_name,EVENTS:name ; then
    ((VERBOSE>1)) && print "${query}" >&2
    return 1
  fi

  doSQL "${query}"
}

# Calculate a "recommended" value for the separation. The
# recommendation comes from some trial and error, and testing various
# ratios of tracks and artists.
recommended_separation() {
  local type="${1}"
  local -i number_of_items="${2}"

  local -i ratio=0
  local -i recommended=0

  # The calculation of ratio is mostly arbitrary. I chose it based on
  # trial and error using different math functions in Perl, AWK and in
  # the ZSH "mathfunc" module. See "mathfunc" in `man zshmodules(1)`
  # for more details and other choices. The current code calculates
  # ratio as a fraction of the total number of items. Using Perl's
  # log() function and this locally defined log2() subroutine, the
  # more items given, the smaller the fraction. So for 5000 items,
  # ratio is 416 (8.3%); for 10 items, ratio is 3 (30%).
  if ((number_of_items > 1)) ; then
    ratio=$(print ${number_of_items} | ${PERL} -ne 'sub log2 {my $n=shift; return log($n)/log(2);} printf qq{%d}, int($_ * (1/log2($_)));')
  fi

  ((VERBOSE)) && print "recommended_separation: ${type}: ratio: ${ratio}" >&2

  ((recommended = number_of_items - ratio))

  print "${recommended}"
}

# Set the Artist and Title separations in the database to the
# "recommended" values.
set_separations() {
  local -r event_name="${1}"
  local -i title_separation="${2}"
  local -i artist_separation="${3}"
  local -i RUN_INTERACTIVE="${4}"

  local response
  local -A separations
  local query="update EVENTS"

  if ((RUN_INTERACTIVE)) ; then
    for type in title artist ; do
      # SC1083: shellcheck does not know about ZSH-style nested parameter expansion
      # SC2248: ...or quotes outside command substitution.
      # shellcheck disable=SC1083,SC2248
      until [[ "${response}" =~ [[:digit:]]+ ]] ; do
	printf "Enter a value for %6s Separation (press <Enter> to use %s): " ${(C)type} "$(eval print \${${type}_separation})" > /dev/tty
	read response < /dev/tty
	if [[ -z "${response}" ]] ; then
	  response=$(eval print \${${type}_separation})
	fi
	# As of Rivendell version 3.4.1, these values come from the
	# Rivendell source code file rivendell/lib/rdevent_line.cpp.
	if ! [[ "${response}" =~ [[:digit:]]+ ]] || ((response < -1 || response > 50000)) ; then
	  printf "%s separation needs to be a numeric value greater than -1 and less than 50000. You entered '%s'\n" ${(C)type} "${response}" > /dev/tty
	  response=''
	fi
      done
      separations[${type}]=${response}
      response=
    done
  else
    separations[title]=${title_separation}
    separations[artist]=${artist_separation}
  fi

  query="${query} set TITLE_SEP=${separations[title]},"
  query="${query} ARTIST_SEP=${separations[artist]}"
  query="${query} where NAME='${event_name}'"

  ((VERBOSE)) && print "set_separations: Query: ${query}" >&2

  if ! okDatabaseStructure EVENTS:name+title_sep+artist_sep ; then
    print "set_separations: ERROR: Unknown database schema. Please report this to the authorities." >&2
    return 1
  fi

  if ((RUN_INTERACTIVE)) ; then
    trap 'print ; print ; print ; trap - ; return ;' 2
    printf "About to update the database. Press <Enter> to continue, or Ctrl-C to cancel: " > /dev/tty
    read < /dev/tty
  fi

  doSQL "${query}"

  if ((RUN_INTERACTIVE)) ; then
    printf "\tUpdated Event %s\n\n\n" "${event_name}"
    trap -
  fi
}

##########################################################################################
##########################################################################################
##
## Script Main Line
##
##########################################################################################
##########################################################################################

typeset -i VERBOSE=0
typeset -i SET_SEPARATIONS=0
typeset -i RUN_INTERACTIVE=0
RDGROUP=''

############# BEGIN external shell commands used in this script. #############
# This script uses these 5 external commands.
# Look for them in their upper case, parameter expanded form.
typeset -a our_commands
our_commands=( cat column fmt getopt perl )
# Find the executables we need; this uses some basic shell and a ZSH trick:
# the (U) in the eval says to evaluate the parameter as all upper case
# letters. This snippet generates shell parameters representing the upper case
# equivalent of the command names and sets the parameter values to the full path
# of the commands.
# Refresh this segment in Emacs by marking the appropriate region (or the whole
# buffer with C-xH) and replacing it with C-uM-|mk-ourCommands --script (shell-command-on-region).
typeset C D
for C in ${our_commands[*]} ; do
  # shellcheck disable=SC2154 # ZSH: ${path} is set by the shell.
  for D in ${path} ; do
    # shellcheck disable=SC2140,SC2086 # we need the quotes
    [[ -x "${D}/${C}" ]] && { eval "${(U)C//-/_}"="${D}/${C}" ; break ; }
  done
  [[ -x $(eval print \$"${(U)C//-/_}") ]] || { print "Cannot find ${C}! Done."; return 1 ; }
done
unset our_commands C D
############## END external shell commands used in this script. ##############

if ! TEMP=$(${GETOPT} -o Vvhg:is: --long version,verbose,help,group:,interactive,set,service: -n "${0##*/}" -- "${@}") ; then
  print "getopt(1) Fatal Error (${?}). Terminating..." >&2
  return 1
fi
eval set -- "${TEMP}"
while : ; do
  # VERBOSE is used, but in a non-Bash way.
  # shellcheck disable=SC2034
  case "${1}" in
    -g|--group) RDGROUP="${2}" ; shift 2 ;;
    -i|--inter*) RUN_INTERACTIVE=1 ; shift ;;
    -s|--serv*) SERVICE=${2} ; shift 2 ;;
    --set) SET_SEPARATIONS=1 ; shift ;;
    -h|--help*) usage ${0##*/} ; exit ;;
    -v|--verb*) ((VERBOSE += 1)) ; shift ;;
    -V|--vers*) showVersion=1 ; shift ;;
    --) shift ; break ;;
    *) print "${0:t}: getopt internal error!. Terminating..." >&2 ; return 1 ;;
  esac
done

if ((showVersion)) ; then
  typeset commit_hash="${v_hash}"
  [[ "${v_hash}" == '$Hash$' ]] &&
    commit_hash="prerelase"
  print "${0:t}: version ${v_major}.${v_minor}.${v_patch}-${${commit_hash#\$Hash: }%$}"
  exit 0
fi

# Snag the SERVICES list. SERVICE names may not contain whitespace.
typeset -a rivendellServiceList
# It seems shellcheck does not know about array assignment?
# shellcheck disable=SC2207
rivendellServiceList=( $(doSQL "select NAME from SERVICES order by NAME") )

# List the SERVICES if there are more than one, otherwise use the lone
# SERVICE.
if [[ -z "${SERVICE}" ]] || [[ "${SERVICE}" =~ list ]] ; then
  if (( ${#rivendellServiceList} > 1 )) ; then
    until [[ ${rivendellServiceList[*]} =~ .*${SERVICE}.* ]] ; do
      print "Current Services:"
      print ${(F)rivendellServiceList} | ${COLUMN} -x -c $(( COLUMNS > 80 ? 78 : COLUMNS ))
      read SERVICE\?"Enter a Service for the Events: "
    done
  else
    SERVICE=${rivendellServiceList[1]}
  fi
fi

# Snag the GROUPS list. GROUP names may not contain whitespace.
typeset -a rivendellGroupList
# It seems shellcheck does not know about array assignment?
# shellcheck disable=SC2207
rivendellGroupList=( $(doSQL "select NAME from GROUPS order by NAME") )

# List the GROUPS and let the user choose one.
if [[ -z "${RDGROUP}" ]] || [[ "${RDGROUP}" =~ list ]] ; then
  if (( ${#rivendellGroupList} > 1 )) ; then
    until [[ ${rivendellGroupList[*]} =~ .*${RDGROUP}.* ]] ; do
      print "Available Groups:"
      print ${(F)rivendellGroupList} | ${COLUMN} -x -c $(( COLUMNS > 80 ? 78 : COLUMNS ))
      read RDGROUP\?"Enter an Event Group: "
    done
  else
    RDGROUP=${rivendellGroupList[1]}
  fi
fi

# Set the shell internal field separator to just <Tab>
IFS=$'\t'

# Will hold the length of the longest Event Name for better looking
# output.
typeset -i max_event_name_len=0
# Find the length of the longest Event name.
query="select max(length(e.NAME)) from SERVICE_CLOCKS sc"
query="${query} join CLOCK_LINES cl on sc.CLOCK_NAME = cl.CLOCK_NAME"
query="${query} join EVENTS e on cl.EVENT_NAME = e.NAME"
query="${query} where sc.SERVICE_NAME = '${SERVICE}'"
query="${query} and e.IMPORT_SOURCE = 3"
query="${query} and e.HAVE_CODE is not NULL and e.HAVE_CODE != ''"
query="${query} order by e.NAME"
if ! okDatabaseStructure SERVICE_CLOCKS:clock_name,CLOCK_LINES:clock_name,EVENTS:name+title_sep+artist_sep+sched_group+have_code+have_code2 ; then
  print "${myName}: ERROR: incompatible database schema; seek professional help!" >&2
  exit 1
fi
((VERBOSE>2)) && print "Length query: ${query}" >&2
# The quoting is the way I want it.
# shellcheck disable=SC2046
read -r max_event_name_len <<<$(doSQL "${query}")

# Find all active Events that include a "Must have Code". The query also
# includes the "Must also have Code" column (have_code2).
outer_query="select distinct e.NAME, e.TITLE_SEP, e.ARTIST_SEP, e.SCHED_GROUP, e.HAVE_CODE, e.HAVE_CODE2 from SERVICE_CLOCKS sc"
outer_query="${outer_query} join CLOCK_LINES cl on sc.CLOCK_NAME = cl.CLOCK_NAME"
outer_query="${outer_query} join EVENTS e on cl.EVENT_NAME = e.NAME"
outer_query="${outer_query} where sc.SERVICE_NAME = '${SERVICE}'"
if [[ -n "${RDGROUP}" ]] ; then
  outer_query="${outer_query} and e.SCHED_GROUP = '${RDGROUP}'"
fi
outer_query="${outer_query} and e.IMPORT_SOURCE = 3"
outer_query="${outer_query} and e.HAVE_CODE is not NULL and e.HAVE_CODE != ''"
outer_query="${outer_query} order by e.NAME"
((VERBOSE>1)) && print "Outer query: ${outer_query}" >&2

# Use the ZSH "coproc" mechanism to perform the query. We do this
# because reading the column data directly in the while() loop causes
# SIGINT to drop out of the loop. We want to continue with the next
# iteration of the loop if the user cancels updating the database for
# an Event. See `man zshbuiltins` (coproc, read -p) and `man zshmisc`
# for details about ZSH coprocesses.
coproc doSQL "${outer_query}" >&p
while read -p event_name title_sep artist_sep sched_group have_code have_code2 ; do
  ((VERBOSE)) &&
    printf "Event: %${max_event_name_len}s: G:%12s T:%5d, A:%5d: %s%s\n" \
	   "${event_name}" \
	   "${sched_group}" \
	   ${title_sep} ${artist_sep} \
	   "${have_code:+Must have '${have_code}'}" \
	   "${have_code2:+ and also have '${have_code2}'}" >&2

  tracks_per_week=$(tracks_per_week "${event_name}" "${have_code}" "${have_code2}")

  # Now that we have a list of required Scheduler Codes for the
  # Event, find the total number of Carts and the total number of
  # Carts with Artists with that (those) code(s).
  inner_query="select count(distinct c.NUMBER),count(distinct c.ARTIST) from CART c"
  inner_query="${inner_query} join CART_SCHED_CODES sc on c.NUMBER = sc.CART_NUMBER where c.GROUP_NAME = '${sched_group}'"
  inner_query="${inner_query} and sc.SCHED_CODE = '${have_code}'"
  if [[ -n "${have_code2}" ]] ; then
    inner_query="${inner_query} "$(printf "and sc.CART_NUMBER in (select CART_NUMBER from CART_SCHED_CODES where SCHED_CODE = '%s')" "${have_code2}")
  fi
  if ! okDatabaseStructure CART:number+artist,CART_SCHED_CODES:cart_number+sched_code ; then
    print "${myName}: ERROR: incompatible database schema; seek professional help!" >&2
    exit 2
  fi
  ((VERBOSE>1)) && print "Inner query: ${inner_query}" >&2
  read tracks artists <<<"$(doSQL """${inner_query}""")"
  ((VERBOSE>1)) && print "Track count: ${tracks}" >&2
  ((VERBOSE>1)) && print "Artist count: ${artists}" >&2

  recommended_title_separation=$(recommended_separation title "${tracks}")
  recommended_artist_separation=$(recommended_separation artist "${artists}")

  printf "Event: %-${max_event_name_len}s Code: %-12s%-25s Tracks: %-5d Per Week: %-5d Artists:%5d Separation: Title %5d Artist %4d\n" \
	 "${event_name}" \
	 "${have_code}" \
	 "${have_code2:+ and Code: ${have_code2}}" \
	 ${tracks} \
	 ${tracks_per_week} \
	 ${artists} \
	 ${title_sep} \
	 ${artist_sep}
  space_count=$((max_event_name_len+27+11+5+5+5 + 7+7+9+10+9))
  printf "%${space_count}sRecommended: title %5d artist %4d\n" \
	 " " ${recommended_title_separation} ${recommended_artist_separation}

  if ((SET_SEPARATIONS)) ; then
    set_separations "${event_name}" ${recommended_title_separation} ${recommended_artist_separation} "${RUN_INTERACTIVE}"
  fi
done

exit

# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: ++ ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***

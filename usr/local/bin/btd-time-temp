#!/bin/zsh
# shellcheck shell=bash disable=SC2016,SC2086,SC2154,SC2162,SC2248
# SC2016: The single quotes are inside a double-quoted string
# SC2086: shellcheck is too quote-happy
# SC2154: I know about all the referenced but not assigned variables
# SC2162: I do not care about read and its backslashes
# SC2248: shellcheck is too quote-happy

# This script complies with Semantic Versioning: http://semver.org/
vMajor=0
vMinor=3
vPatch=5
vHash='$Hash$'

##############################################################################
##############################################################################
##
## btd-time-temp
##
## Provide current time and temperature audio snippets to Rivendell.
##
## This script uses the current system time (ensure the system time is
## synchronized to a working network time protocol (NTP) service), and the
## United States National Weather Service (NWS) (and Synoptic Data) to import
## audio files into a specific audio Cart in the Rivendell Library.
##
## Audio files containing time readings can contain any meaningful sounds, and
## must be named using four digits like this: HHMM. You should at least provide
## audio files for every minute of every hour between midnight (0000) and noon
## (1200). More "sophisiticated" time announcement files may include the "am"
## and "pm" suffixes (or simply "a" or "p") in order to differentiate the time
## of day.
##
## Similarly, audio files containing temperature readings are named for the
## numeric temperature. (There is no distinction between Farenheit and Celcius.)
## Temperature readings are retrieved using the NWS four character location
## codes (see https://w1.weather.gov/xml/current_obs/seek.php?Find=Find for the
## state-by-state lists of locations). This script uses the XML file, not the
## RSS file. The URL is formed using the four-character code inserted into this
## string (substituting for "XXXX"):
## https://w1.weather.gov/xml/current_obs/XXXX.xml See also
## https://developers.synopticdata.com/mesonet/
##
## Specify the NWS location code using the "-l" (or "--location") command line
## parameter. See usage() for more details.
##
##############################################################################
##############################################################################

##############################################################################
##############################################################################
##
## REQUIREMENTS
##
## Network: This script requires access to both the local LAN (for NTP
## synchronization), and the Internet (for current temperature retrieval).
##
## zsh(1): needed to run this script. Install it with `sudo yum install zsh`.
##
## xmlstarlet(1): this is used to parse the XML from the NWS website. Install it
## with the command `sudo yum install xmlstarlet` (from the epel repository).
##
## jq(1): this is used to parse the JSON from the Synoptic Mesonet API. Install
## it with the command `sudo yum install jq`.
##
## ffmpeg(1): The script uses the ffmpeg command to concatenate the time audio
## file and the temperature audio file into a single file. It then imports that
## single audio file to the Rivendell library using rdimport(1). Install it with
## the command `sudo yum install ffmpeg` (from the nux-dextop repository).
##
##############################################################################
##############################################################################
##
##############################################################################
##############################################################################
##
## LOCALLY DEFINED SUBROUTINES
##
##############################################################################
##############################################################################

## Tell them how to use this command.
usage() {
  local my_name=${1:t}

  ${CAT} << EOF >&2
${my_name}: Get the current time and temperature and import an audio
file containing same into the Rivendell Library.

SUMMARY

${my_name} [ --verbose ... ] [ --debug ]
              --cart (-c) <Cart Number>
              --location (-l) <NWS Location Code>[,<NWS Location Code>]...

DESCRIPTION

${my_name} captures the current time of day and the current reported temperature
from the US National Weather Service into a single audio file and uses
rdimport(1) to import that audio file to a specified Cart in the Rivendell
Library.

The command line arguments --cart and --location are mandatory. Use --cart
(short option: -c) to specify the Rivendell Cart Number. Use --location (short
option -l) to specify one or more NWS location codes for which to retrieve the
current temperature from the US National Weather Service (see
https://w1.weather.gov/xml/current_obs/seek.php?Find=Find for all available
locations). Separate multiple location codes with a comma (and no whitespace).

Specifying multiple location codes is a form of "backup". If the URL for the
first code fails to return data, ${my_name} attempts to retrieve observation
data for the second and subsequent codes in order. The last known observation
values are used if none of the URLs return data.

Use the command line parameter --verbose to make ${my_name} more chatty about
its progress. Use one -v to output status. Use two or more -v to run the script
with "xtrace" turned on (see man zshoptions for explanation and details of the
xtrace option).

Use the command line parameter --debug to direct all output to the
terminal. Otherwise all output is directed to a pair of files in /var/tmp.

EOF
}

## Get the current temperature (generic). This wraps the service-specific
## "current conditions" retrieval. It checks the "last updated" timestamp at NWS
## and uses Synoptic when the NWS conditions have not been updated for more than
## one hour.
get_temp() {
  local -r nws_location="${1}"

  local current_observation

  ## Get observation data from the NWS.
  ## Read the data from the API, then set the variable to read-only.
  if ! current_observation=$(nws_get_observation "${nws_location}") ; then
    ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: Unable to get observation from NWS for '${nws_location}'."

    ## Unable to get a current temperature from NWS, try Synoptic.
    if ! current_observation=$(syn_get_observation "${nws_location}") ; then
      ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: Unable to get observation from Synoptic for '${nws_location}'."
      print ""
      return 1
    fi
  fi

  printf "%d" "${current_observation}"
  return
}

## Get the current conditions from the US National Weather Service.
## Returns the current temperature as an integer. On error, returns an empty
## string with the return code set appropriately.
nws_get_observation() {
  local -r NWS_LOCATION="${1}"

  local raw_observation_data
  local -r url="https://w1.weather.gov/xml/current_obs/${NWS_LOCATION}.xml"
  local -i current_temperature

  ((VERBOSE)) && ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.notice -i "NOTICE: Getting data from NWS for location '${NWS_LOCATION}'."
  if ! raw_observation_data="$(api_get_with_errors "${url}")" ; then
    local -i api_get_exit_value=${?}
    ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: Unable to retrieve data from NWS for '${NWS_LOCATION}'."
    print ""
    return ${api_get_exit_value}
  fi

  ## Check the time on the current observation.
  if ! read -r observation_time_rfc822 <<<"$(echo "${raw_observation_data}" | ${XMLSTARLET} select -t -v 'current_observation/observation_time_rfc822')" ; then
    ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: Unable to extract 'observation_time_rfc822' from '${raw_observation_data}'."
    print ""
    return 102
  fi
  if ! read -r observation_time <<<"$(${DATE} --date="${observation_time_rfc822}" '+%s')" ; then
    ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: Unable to convert 'observation_time_rfc822' to epoch seconds."
    print ""
    return 102
  fi

  ## Return an empty string with an error if the observation time is more than
  ## one hour old.
  if (( (CURRENT_TIME - observation_time) > 3600 )) ; then
    ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.notice -i "NOTICE: NWS observation time is more than one hour old."
    print ""
    return 99
  fi

  ## Extract the current temperature (in our unit of choice) from the XML.
  if ! read -r current_temperature <<<"$(print ${raw_observation_data} |
			       ${XMLSTARLET} select -t -v current_observation/temp_${TEMPERATURE_UNIT})" ; then
    ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: Unable to extract 'temp_${TEMPERATURE_UNIT}' from '${raw_observation_data}'."
    return 103
  fi

  ## Return the current temperature after dropping the decimal point and
  ## everything to its right.
  printf "%d" ${current_temperature%.*}
}

## Get the current conditions from Synoptic MESONET.
## Returns the current temperature as an integer. On error, returns an empty
## string with the return code set appropriately.
syn_get_observation() {
  local -r NWS_LOCATION="${1}"
  ## Synoptic Mesonet API base URL.
  local -r url_base="https://api.synopticdata.com/v2/stations/latest"
  typeset -r synoptic_api_token="$(${GREP} -v '^#' ${SYNOPTIC_API_TOKEN_FILE})"
  local raw_observation_data
  local -i current_temperature

  case _${TEMPERATURE_UNIT} in
    _[Ff]) syn_unit=english ;;
    _[Cc]) syn_unit=metric ;;
    *) syn_unit=english ;;
  esac

  local -r url="${url_base}?radius=${NWS_LOCATION},10&limit=1&vars=air_temp&within=60&timeformat=%Y%m%d-%H%M%S&units=${syn_unit}&fields=stid&token=${synoptic_api_token}"

  ## Grab the entire output from Synoptic for this location.
  if ! read -r raw_observation_data <<<"$(api_get_with_errors "${url}")" ; then
    local -i api_get_exit_value=${?}
    ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: Unable to retrieve data from Synpotic for '${NWS_LOCATION}'."
    print ""
    return ${api_get_exit_value}
  fi

  ## Note that the jq(1) expression is cAsE SenSiTive.
  if ! read -r current_temperature <<<"$(print "${raw_observation_data}" | ${JQ} '.STATION[].OBSERVATIONS.air_temp_value_1.value')" ; then
    ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: Unable to extract 'air_temp_value_1.value}' from '${current_observation}'."
    print ""
    return 103
  fi

  printf "%d" ${current_temperature%.*}
}

## Get data from an HTTP API with error checking.
api_get_with_errors() {
  local url="${1}"

  local raw_observation_data
  local -i wget_exit_status
  local wget_exit_message=""

  ## Grab the entire output from the API endpoint.
  ((VERBOSE)) && ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.info -i "INFO: About to get data from '""${url}""'."
  raw_observation_data=$(${WGET} --quiet --timeout=5 -O - "${url}")
  wget_exit_status="${?}"
  ## Exit status messages are from wget(1) version 1.14, shipped with CentOS 7.
  case "${wget_exit_status}" in
    0) wget_exit_message="" ;;
    1) wget_exit_message="Generic error." ;;
    2) wget_exit_message="Parse Error. This should NOT happen." ;;
    3) wget_exit_message="File I/O Error. This should NOT happen." ;;
    4) wget_exit_message="Network failure. Hopefully it will be fixed next time." ;;
    5) wget_exit_message="SSL verification error. This should NOT happen." ;;
    6) wget_exit_message="Authentication error. Check your credentials." ;;
    7) wget_exit_message="Protocoal error(s)." ;;
    8) wget_exit_message="Server error. See returned HTML for details?" ;;
    *) wget_exit_message="Unknown WGET error code. Please consult the authorities." ;;
  esac
  if ((wget_exit_status != 0)) ; then
    ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: ${WGET} returned exit status '${wget_exit_status}'. ${wget_exit_message}"
    printf "\n"
    return ${wget_exit_status}
  fi
  if [[ -z "${raw_observation_data}" ]] ; then
    ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: ${WGET} retrieved empty data."
    printf "\n"
    return 101
  fi

  printf "%s\n" "${raw_observation_data}"
  return
}

## Make mysql calls look a bit more asthetically pleasing. The return value of
## this shell funtion is the exit value of the mysql command invocation.
do_sql() {
  local statement="${1:?Need a database query to run.}"
  local useMyCNF=0
  local usableMyCNF=4
  local rdconfig=${RD_CONFIG:-${ROOT:-/}etc/rd.conf}

  typeset -gx _DB_HOST _DB_USER _DB_PWD _DB_DATABASE _USE_MYCNF

  zmodload zsh/mapfile

  # Use the exported variables if we have been through this function
  # already. This applies to each running instance of scripts that use this
  # function. This helps prevent the need to look this stuff up every time this
  # function is called.
  if [[ -z "${_DB_HOST}" ]] ; then

    # Rivendell DB Details: Use credentials in ~/.my.cnf if it exists, else get
    # credentials from rd.conf if it exists, else from the environment, else use
    # defaults here.
    # BUG ALERT: this assumes the credentials in .my.cnf are relevant to the
    # Rivendell database.
    if [[ -r ~/.my.cnf ]] && [[ $(${GREP} -E -c '^(database|host|user|password)' ~/.my.cnf) -ge 4 ]] ; then
      cd -q || return

      myCnfLines=( "${mapfile[.my.cnf]}" )

      # Need to check for each of these parameters in .my.cnf in order to be
      # able to use it.
      for parm in database host password user ; do
	if echo "${myCnfLines[*]}" | ${GREP} --quiet --ignore-case "${parm}" ; then
	  (( useMyCNF++ ))
	fi
      done
    else
      # Horribly insecure, but this is the "Rivendell Way".
      if [[ -r "${rdconfig}" ]] ; then
	DB_HOST=$(${SED} -e '1,/^\[mySQL\]$/d' -e '/^\[/,$d' "${rdconfig}" | ${AWK} -F'=' '/^Hostname=/{print $2}')
	DB_USER=$(${SED} -e '1,/^\[mySQL\]$/d' -e '/^\[/,$d' "${rdconfig}" | ${AWK} -F'=' '/^Loginname=/{print $2}')
	DB_PASSWORD=$(${SED} -e '1,/^\[mySQL\]$/d' -e '/^\[/,$d' "${rdconfig}" | ${AWK} -F'=' '/^Password=/{print $2}')
	DB_DATABASE=$(${SED} -e '1,/^\[mySQL\]$/d' -e '/^\[/,$d' "${rdconfig}" | ${AWK} -F'=' '/^Database=/{print $2}')
      else
	# Last ditch effort to set the MySQL access credentials.
	# These are the "conventional" defaults that might otherwise
	# exist in /etc/rd.conf (and friends).
	DB_HOST=${RD_DB_HOST:-"localhost"}
	DB_USER=${RD_DB_USER:-"rduser"}
	DB_PASSWORD=${RD_DB_PASS:-"letmein"}
	DB_DATABASE=${RD_DB_DATABASE:-"Rivendell"}
      fi
    fi

    _DB_HOST=${DB_HOST}
    _DB_USER=${DB_USER}
    _DB_PWD=${DB_PASSWORD}
    _DB_DATABASE=${DB_DATABASE}
    _USE_MYCNF=${useMyCNF}
  fi

  if (( _USE_MYCNF == usableMyCNF )) ; then
    ${MYSQL} -s -N -e "${statement}"
  else
    ${MYSQL} -s -N -B -u "${_DB_USER}" -p"${_DB_PWD}" -h "${_DB_HOST}" "${_DB_DATABASE}" -e "${statement}"
  fi
}

## Determine whether the database structure matches our expectation.
## Parameters:
## - comma-separated list of table:column[+column...] tuples
## - (optional) verbose boolean
## Returns: true (0) if the database structure is OK, false (1) if the table
## does not exist, or false (2) if a column is not found in the table.
okDatabaseStructure() {
  local tables_and_columns="${1}" ; shift

  local column schema table
  local -A tables

  # Ensure that the Internal Field Separator (IFS) is a <Space> for the command
  # substitution below.
  local -r oIFS="${IFS}" ; IFS=' '

  # Split the comma-separated list of table:colum+column+column... into the
  # ${tables} ZSH associative array parameter.
  # shellcheck disable=SC2190,SC2207,SC2116
  # SC2190: ZSH arrays are handled differently than BASH arrays
  # SC2207: we do not want to use BASH mapfile or 'read -a'
  # SC2116: we need the echo in order to expand the parameter properly.
  tables=( $(echo ${${tables_and_columns//,/ }//:/ }) )

  # Check for the existence of each of these columns in these tables.
  # shellcheck disable=SC2116,SC2086
  # SC2116: we need the echo in order to expand the parameter properly.
  # SC2086: we do not want to quote the variable because it will
  #         change the way we want it expanded.
  for table in $(echo ${(k)tables}) ; do
    if ! schema=$(do_sql "show create table \`${table}\`\\G" 2>/dev/null) ; then
      IFS="${oIFS}"
      echo "okDatabaseStructure: ERROR: unable to get a schema for table '${table}'" >&2
      return 1
    fi

    # shellcheck disable=SC2116
    # SC2116: we need the echo in order to expand the parameter properly.
    for column in $(echo "${tables[${table}]//+/ }") ; do
      if ! echo "${schema}" | ${GREP} --quiet --ignore-case --perl-regexp "\s+\`${(U)column}\`\s+" ; then
	IFS="${oIFS}"
	echo "okDatabaseStructure: ERROR: unable to find column '${column}' in table '${table}'" >&2
	return 2
      fi
    done
  done

  IFS="${oIFS}"
  return
}

##############################################################################
##############################################################################
##
## SCRIPT MAIN LINE
##
##############################################################################
##############################################################################

## In which we find the ZSH implementation of strftime(3) and the shell
## parameter EPOCHSECONDS.
zmodload zsh/datetime

## In which we find the filesystem zstat() subroutine.
zmodload zsh/stat

############# BEGIN external shell commands used in this script. #############
# This script uses these 14 external commands.
# Look for them in their upper case, parameter expanded form.
typeset -a our_commands
our_commands=( awk cat date ffmpeg grep jq logger mktemp mysql rdimport rm sed wget xmlstarlet )
# Find the executables we need; this uses some basic shell and a ZSH trick:
# the (U) in the eval says to evaluate the parameter as all upper case
# letters. This snippet generates shell parameters representing the upper case
# equivalent of the command names and sets the parameter values to the full path
# of the commands.
# Refresh this segment in Emacs by marking the appropriate region (or the whole
# buffer with C-xH) and replacing it with C-uM-|mk-ourCommands --script (shell-command-on-region).
typeset C D
for C in ${our_commands[*]} ; do
  # shellcheck disable=SC2154 # ZSH: ${path} is set by the shell.
  for D in ${path} ; do
    # shellcheck disable=SC2140,SC2086 # we need the quotes
    [[ -x "${D}/${C}" ]] && { eval "${(U)C//-/_}"="${D}/${C}" ; break ; }
  done
  [[ -x $(eval print \$"${(U)C//-/_}") ]] || { print "Cannot find ${C}! Done."; return 1 ; }
done
unset our_commands C D
############## END external shell commands used in this script. ##############

typeset -i VERBOSE=0
LOGGER_VERBOSE=''

##############################################################################
##############################################################################
##
## CONFIGURATION
##
## This secton of the file contains configuration settings for this script.
## Defaults may be overridden by setting shell environment variables by the
## thing what calls this script.
##
##############################################################################
##############################################################################
NWS_LOCATION_CODE=''
typeset -i TO_CART=0

TOP_DIR="${TOP_DIR:-/usr/local/share/time-temp}"
TEMPERATURE_DIR="${TEMPERATURE_DIR:-${TOP_DIR}/TempAnnounce}"
TIME_DIR="${TIME_DIR:-${TOP_DIR}/TimeAnnounce}"

## Default temperature unit is Farenheit. Specify Celcius in the calling
## environment variable TEMPERATURE_UNIT (case is ignored).
typeset -rx TEMPERATURE_UNIT=${TEMPERATURE_UNIT:-f}

## We poll the NWS only once per hour since they update the conditions only that
## often. Use the file in $(LAST_OBSERVATION} as a cache.
typeset -rx LAST_OBSERVATION="${TOP_DIR}/last-observation"

## Synoptic Data API token. This credential grants permission to request weather
## data from the server. The file format is simply a single line containing the
## token. Comments lines start with a "#" symbol.
typeset -rx SYNOPTIC_API_TOKEN_FILE="${TOP_DIR}/synoptic_api_token"

if ! TEMP=$(getopt -o c:l:hVvd --long cart:,location:,help,version,verbose,debug -n "${0:t}" -- "${@}") ; then
  echo "getopt(1) Fatal Error (${?}). Terminating..." >&2
  return 1
fi
eval set -- "${TEMP}"
while : ; do
  # VERBOSE is used, but in a non-Bash way.
  # shellcheck disable=SC2034
  case "${1}" in
    -c|--cart) TO_CART="${2}" ; shift 2 ;;
    -l|--location) NWS_LOCATION_CODE="${2}" ; shift 2 ;;
    -h|--help*) usage "${0}" ; exit ;;
    -v|--verb*) ((VERBOSE += 1)) ; shift ;;
    -d|--debu*) ((DEBUG=1)) ; shift ;;
    -V|--vers*) showVersion=1 ; shift ;;
    --) shift ; break ;;
    *) echo "${0##*/}: getopt internal error!. Terminating..." >&2 ; return 1 ;;
  esac
done

if ((showVersion)) ; then
  echo "${0##*/}: version ${vMajor}.${vMinor}.${vPatch}-${${vHash#\$Hash: }%$}"
  exit 0
fi

if ! ((DEBUG)) ; then
  ## Log STDOUT and STDERR of this script and all commands called by this script
  ## to separate files.
  exec 1> "/var/tmp/${0##*/}.out"
  exec 2> "/var/tmp/${0##*/}.err"
fi

## Enable script tracing and logger(1) output to STDERR for troubleshooting if
## they specified --verbose mode on the command line.
((VERBOSE)) && typeset -r LOGGER_VERBOSE="--stderr"
if ((VERBOSE > 1)) ; then
  setopt xtrace
fi

## Make sure they specified both of the required parameters.
if [[ -z "${TO_CART}" ]] ; then
  ${LOGGER} "${LOGGER_VERBOSE}" "${0:t}" -p local7.error -i "ERROR: Missing Rivendell cart number on the command line."
  usage "${0}"
  exit 2
fi
if [[ -z "${NWS_LOCATION_CODE}" ]] ; then
  ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: Missing NWS Location Code(s) on the command line."
  usage "${0}"
  exit 3
fi

## Make sure the data directory is writable by the user ID running this script.
if ! [[ -w "${TOP_DIR}" ]] ; then
  ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: Missing write permission on the cache directory '${TOP_DIR}'. Please adjust permissions."
  exit 1
fi

## Ask Rivendell what its system-wide sample rate is. Set it to 44100 if we are
## unable to discern the Rivendell setting.
if ! okDatabaseStructure SYSTEM:sample_rate ; then
  ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: Incompatible Rivendell database. Missing column 'Rivendell.SYSTEM.SAMPLE_RATE'."
  exit 4
fi
sample_rate=$(do_sql "select SAMPLE_RATE from SYSTEM")
typeset -r sample_rate=${sample_rate:-44100}
((VERBOSE)) && ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.notice -i "NOTICE: Using sample rate '${sample_rate}' for audio transcoding."

## Obtain the Rivendell Group for for the Cart. rdimport(1) requires this.
if ! okDatabaseStructure CART:number+group_name ; then
  ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: Incompatible Rivendell database. Missing columns 'Rivendell.CART.NUMBER' and/or 'Rivendell.CART.GROUP_NAME'."
  exit 4
fi
typeset -r group_name=$(do_sql "select GROUP_NAME from CART where NUMBER=${TO_CART}")
if [[ -z "${group_name}" ]] ; then
  ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: Unable to look up Rivendell Group name for Cart '${TO_CART}'."
  exit 5
fi
((VERBOSE)) && ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.notice -i "NOTICE: Importing audio to Cart '${TO_CART}' in Group '${group_name}'."

## Make CURRENT_TIME and other variables read-only for the duration of this run
## so that we don't risk them changing by some nefarious process. We save the
## value of EPOCHSECONDS because EPOCHSECONDS changes every second and we want a
## consistent time for the duration of this run.
typeset -rx CURRENT_TIME="${EPOCHSECONDS}"
typeset -r hour_minute=$(strftime "%I%M" "${CURRENT_TIME}")
typeset -r current_minute=$(strftime "%M" "${CURRENT_TIME}")

## Refresh the conditions from the NWS only once per hour. Save the output and
## use it for all the other minutes in the hour.
##
## BUG ALERT: this assumes the script is run (at least) at fifteen minutes past
## the hour. Adjust the conditional statement if your schedule is different.
if ((current_minute == 15)) || ! [[ -s "${LAST_OBSERVATION}" ]] ; then

  ## Attempt to retrieve observation data from all locations specified on the
  ## command line. Break out of the loop when we have data.
  # shellcheck disable=SC2086,SC2116
  for NWS_LOCATION in $(echo ${NWS_LOCATION_CODE//,/ }) ; do
    if ! current_temperature=$(get_temp "${NWS_LOCATION}") ; then
      ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: Unable to obtain current temperature for '${NWS_LOCATION_CODE}'."
    fi
    break
  done

  ## Save the reported temperature in the cache so we have it for future runs.
  printf "%d\n" "${current_temperature}" > "${LAST_OBSERVATION}"
fi

## We did not retrieve the current temp above, so use the cached value.
if [[ -z "${current_temperature}" ]] ; then
  ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.info -i "INFO: using last observation for current temperature."
  if ! current_temperature=$(${CAT} "${LAST_OBSERVATION}") ; then
    ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: Unable to obtain current temperature from '${LAST_OBSERVATION}'."
  fi
fi

## Save the concatenated time and temperature audio in this file.
typeset -r current_time_and_temperature="$(${MKTEMP} --suffix=.wav)"

## Set the shell to remove the temporary files on script exit or interruption.
## SC2064: We want these variables to be expanded when referenced rather than
## when signaled.
# shellcheck disable=SC2064
if ! ((DEBUG)) ; then
  trap "${RM} -f ${current_time_and_temperature}" 0 1 2 3
fi

## Use ffmpeg to concatenate and transcode the time and temperature audio files
## into a PCM file with the sample rate that matches the system setting in
## Rivendell.
((VERBOSE)) && ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.notice -i "NOTICE: ffmpeg: 'concat:${TIME_DIR}/${hour_minute}|${TEMPERATURE_DIR}/${current_temperature}'"
${FFMPEG} -y -loglevel quiet -i "concat:${TIME_DIR}/${hour_minute}|${TEMPERATURE_DIR}/${current_temperature}" -c pcm_s16le -ar "${sample_rate}" "${current_time_and_temperature}"

if ! [[ -s "${current_time_and_temperature}" ]] ; then
  ${LOGGER} "${LOGGER_VERBOSE}" -t "${0:t}" -p local7.error -i "ERROR: created an empty audio file that was supposed to have the time and temperature."
  exit 4
fi

## Use rdimport(1) to import the audio to the specified Cart.
delete_source='--delete-source'
if ((DEBUG)) ; then
  typeset -r delete_source=''
fi
## We need to leave variables used as command line parameters unquoted otherwise
## rdimport(1) interprets them as required parameters.
# shellcheck disable=SC2248
${RDIMPORT} \
  ${VERBOSE:+'--verbose'} \
  --autotrim-level=-40 \
  --delete-cuts \
  ${delete_source} \
  --fix-broken-formats \
  --set-string-title="${current_temperature} degrees at $(strftime '%I:%M %p' ${CURRENT_TIME})" \
  --to-cart="${TO_CART}" \
  "${group_name}" \
  "${current_time_and_temperature}"

exit

# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: ++ ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***

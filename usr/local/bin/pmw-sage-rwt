#!/bin/zsh
# shellcheck shell=bash disable=SC2154

# This script complies with Semantic Versioning: http://semver.org/
vMajor=0
vMinor=2
vPatch=2
# SC2016: $Hash is not a shell variable.
# shellcheck disable=SC2016
vHash='$Hash$'

# Based on sage_endec_rwt.sh in the Rivendell source distribution
#
# Run a Required Weekly Test on a Sage Digital ENDEC
#
#   (C) Copyright 2021 David Klann <dklann@broadcasttool.com>
#   (C) Copyright 2012 Fred Gleason <fredg@paravelsystems.com>
#
#      $Id: sage_endec_rwt.sh,v 1.1.2.1 2012/10/11 19:16:27 cvs Exp $
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License version 2 as
#   published by the Free Software Foundation.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public
#   License along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

##############################################################################
##############################################################################
##
## Start local function definitions
##
##############################################################################
##############################################################################

##############################################################################
# function usage()
# How does this work?
# Returns null
##############################################################################
function usage() {
  local myName="${1:t}"

  ${CAT} << EOF

${myName}: issue a required weekly test (RWT) on the specified EAS
device

Summary: ${myName} <hostname or IP address> <username> <password>

Set the shell environment variable DEBUG to 'echo' to run this script
without actually triggering the EAS test.

EOF
}

##############################################################################
##############################################################################
##
## End local function definitions
##
##############################################################################
##############################################################################

##############################################################################
##############################################################################
##
## Start script mainline
##
## Call the SAGE HTTP "API" to trigger an EAS Required Weekly Test.
##
##############################################################################
##############################################################################

############# BEGIN external shell commands used in this script. #############
# This script uses these 5 external commands.
# Look for them in their upper case, parameter expanded form.
our_commands=( cat curl getopt logger ping )
# Find the executables we need; this uses some basic shell and a ZSH trick:
# the (U) in the eval says to evaluate the parameter as all upper case
# letters. This snippet generates shell parameters representing the upper case
# equivalent of the command names and sets the parameter values to the full path
# of the commands.
# Refresh this segment in Emacs by marking the appropriate region (or the whole
# buffer with C-xH) and replacing it with C-uM-|mk-ourCommands --script (shell-command-on-region).
typeset C D
# SC2048: shellcheck overly aggressive quote recommendation.
# shellcheck disable=SC2048
for C in ${our_commands[*]} ; do
  # shellcheck disable=SC2154 # ZSH: ${path} is set by the shell.
  for D in ${path} ; do
    # shellcheck disable=SC2140,SC2086,SC2296 # we need the quotes, ZSH-specific expansion
    [[ -x "${D}/${C}" ]] && { eval "${(U)C//-/_}"="${D}/${C}" ; break ; }
  done
  # shellcheck disable=SC2296,SC2312 # ZSH-specific expansion
  [[ -x $(eval print \$"${(U)C//-/_}") ]] || { print "Cannot find ${C}! Done."; return 1 ; }
done
unset our_commands C D
############## END external shell commands used in this script. ##############

if ! TEMP=$(${GETOPT} -o hVv --long help,version,verbose -n "${0:t}" -- "${@}") ; then
  echo "getopt(1) Fatal Error (${?}). Terminating..." >&2
  return 1
fi
eval set -- "${TEMP}"
while : ; do
  # VERBOSE is used, but in a non-Bash way.
  # shellcheck disable=SC2034
  case "${1}" in
    -h|--help*) usage "${0}" ; exit ;;
    -v|--verb*) ((VERBOSE += 1)) ; shift ;;
    -V|--vers*) showVersion=1 ; shift ;;
    --) shift ; break ;;
    *) echo "${0:t}: ${GETOPT} internal error!. Terminating..." >&2 ; return 1 ;;
  esac
done

if ((showVersion)) ; then
  # SC2299: ZSH parameter expansions can be nested
  # shellcheck disable=SC2299
  echo "${0:t}: version ${vMajor}.${vMinor}.${vPatch}-${${vHash#\$Hash: }%$}"
  exit 0
fi

## Ensure we have all three command line parameters.
if [[ -z "${1}" ]] ; then
  usage "${0}"
  ${LOGGER} --stderr -t "${0:t}" -p local7.err -i  "Error: Missing host."
  exit 125
fi
if [[ -z "${2}" ]] ; then
  usage "${0}"
  ${LOGGER} --stderr -t "${0:t}" -p local7.err -i  "Error: Missing the device username."
  exit 126
fi
if [[ -z "${3}" ]] ; then
  usage "${0}"
  ${LOGGER} --stderr -t "${0:t}" -p local7.err -i  "Error: Missing the device password."
  exit 127
fi

#DEBUG=echo

SAGEHOST="${1}"
SAGEUSER="${2}"
SAGEPASS="${3}"

CURL_OUTPUT="${CURL_OUTPUT:-/var/tmp/${0:t}-curl.out}"

# Log STDOUT and STDERR of this script and all commands called by this script to
# separate files.
exec 1> "/var/tmp/${0:t}.out"
exec 2> "/var/tmp/${0:t}.err"
# And enable ZSH script tracing (to stderr)
setopt xtrace

if ! [[ -x ${CURL} ]] ; then
  ${LOGGER} --stderr -t "${0:t}" -p local7.err -i  "Error: Cannot find curl command line app."
  exit 2
fi

# SC2069: ZSH redirection is a little different than BASH
# shellcheck disable=SC2069
if ! ${PING} -q -c 1 -w 1 "${SAGEHOST}" 2>&1 > /dev/null ; then
  ${LOGGER} --stderr -t "${0:t}" -p local7.err -i  "Error: cannot ping '${SAGEHOST}', will not continue."
  exit 3
fi

${LOGGER} -t "${0:t}" -p local7.info -i -- "INFO: Running curl(1) to ${SAGEHOST}."
# SC2086 CURL is simply the full path to the executable, no quotes needed.
# shellcheck disable=SC2086
${DEBUG} ${CURL} \
	 --verbose \
	 --output "${CURL_OUTPUT}" \
	 --anyauth \
	 --user "${SAGEUSER}:${SAGEPASS}" \
	 --data 'rwt=1\&handle=1' \
	 "http://${SAGEHOST}/cgi-bin/pend.cgi"
exit

##############################################################################
##############################################################################
##
## End script mainline
##
##############################################################################
##############################################################################
# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: ++ ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***

#!/bin/bash
# shellcheck shell=bash disable=SC2086
# SC2086: shellcheck is too aggressive with quoting recommendations

##############################################################################
##############################################################################
##
## This script needs write access to files in /var/cache/public
##
## Create this directory and set its permission mode to 01777
## (sudo chmod 1777 /var/cache/public), similarly to /tmp and /var/tmp
##
##############################################################################
##############################################################################

# This script complies with Semantic Versioning: http://semver.org/
declare -r vMajor=0
declare -r vMinor=2
declare -r vPatch=7
# We can do this in one step in ZSH, but Bash needs 2 statements
# And we do *not* want $Hash expanded yet.
# shellcheck disable=SC2016
declare -r vHash='$Hash$'
declare -r vvHash="${vHash#\$Hash: }"

declare DOMAIN=''
declare THE_HOST_NAME=''
declare -r WHATS_MY_IP_URL='https://whatsmyip.btd.support/'

# See API_BASE_ROUTE below for the API route.
declare -r API_PROTO='https'
declare -r API_HOST='api.digitalocean.com'
# ShellCheck does not seem to know about read-only variables.
# shellcheck disable=SC2155
declare -r DO_API_KEY=$([[ -r ${HOME}/.config/doctl/api-access ]] && cat ${HOME}/.config/doctl/api-access)
declare -r IP_ADDRESS_CACHE='/var/cache/public/last-known-public-ip'
declare -i VERBOSE=0
declare -i INTERACTIVE=0
declare -i DRY_RUN=0
declare -i FORCE=0

##########################################################################################
## Locally defined subroutines
##########################################################################################

function usage() {
  myName=${1}

  cat << EOF
${myName}: update DNS records for a non-static public IP address.

Summary: ${myName##*/} [ --verbose (-v) ] [ --version (-V) ]
                [ --help ] [ --interactive (-i) ]
                [ --force ]
                [ --dry-run (-D) ]
                [ --domain (-d) <DOMAIN> ]
		[ --hostname (-h) <HOSTNAME> ]
                [ --ipv6 (-6) ]

The default domain (if you do not specify one) is "btd.support".

The default hostname (if you do not specify one) is "wcaa-studio".

${myName} updates the name server "A" (aka "host") record for the
default or named domain.

This script depends on two external resources:

 - a Digital Ocean compantible API containing DNS resource records,
   with an API access key stored in a local file; these values
   are currently set to:

   '${API_PROTO}://${API_HOST}/${API_BASE_ROUTE}'

 - an HTTP-based public IP address reporting tool; it currently
   uses David Klann's personal web server:

   '${WHATS_MY_IP_URL}'

Changing the location of either of these resources requires updating
the code in this script (see the variables at the top of the script).

Locally, ${myName} depends on the cache directory /var/cache/public
being world writable. The file ${IP_ADDRESS_CACHE}
shall contain the last known public IP address for this site.

${myName} always attempts to update both the IPv4 address record
('A'), and the IPv6 address record ('AAAA') for the invoking
host. ${myName} simply skips the 'AAAA' record update if it cannot
determine the host's IPv6 address.

Use the --dry-run (short option, -D) option to tell what would happen
without doing it.

Use the --force (short option, -f) option to force an update to the domain
record.

When called with the --interactive (short option, -i) option, ${myName} directs
all output to the terminal (STDERR) rather than a file.

EOF
}

# Execute curl(1) against the Digital Ocean API.
# Returns the address.
function do_curl() {
  local -r method="${1}" ; shift
  local -r route="${1}" ; shift
  local -r data="${1}"

  if [[ -z "${DO_API_KEY}" ]] ; then
    printf '%s: ERROR: Missing Digital Ocean API Key.\n' "${0##*/}" >&2
    return 1
  fi

  curl --silent \
       -X "${method}" \
       -H 'Content-Type: application/json' \
       -H "Authorization: Bearer ${DO_API_KEY}" \
       ${data:+-d ${data}} \
       "${API_PROTO}://${API_HOST}${route}"
}

# Given a domain record (aka "zone"), return the ID value associated
# with the key/value pair.
# https://docs.digitalocean.com/reference/api/api-reference/#operation/get_domain_record
# (documentation link updated Tue May 10 06:28:40 AM CDT 2022)
function get_domain_record_id() {
  local -r json_string="${1}" ; shift
  local -r type="${1}" ; shift
  local -r key="${1}" ; shift
  local -r value="${1}"

  local -i x=0

  # 100 is just an arbitrarily high limit on the number of
  # records. Adjust accordingly.
  while ((x<100)) ; do
    if [[ $(printf '%s' "${json_string}" | jq ".domain_records[${x}].${key}") =~ .*${value}.* ]] ; then
      if [[ $(printf '%s' "${json_string}" | jq ".domain_records[${x}].type") =~ .*${type}.* ]] ; then
	printf '%s' "${json_string}" | jq ".domain_records[${x}].id"
      fi
      break
    fi
    ((x++))
  done
  if ((x == 100)) ; then
    printf '%s: ERROR: unable to get a domain record type "%s" for key: %s value: %s\n' \
	   "${0##*/}" "${type}" "${key}" "${value}" >&2
    printf "UNKNOWN\n"
    return 1
  fi
}

##############################################################################
##############################################################################
##     SCRIPT       MAIN       LINE
##############################################################################
##############################################################################

if ! TEMP=$(getopt -o Dd:fh:iVv --long dry-run,domain:,force,hostname:,interactive,help,version,verbose -n "${0##*/}" -- "${@}") ; then
  printf 'getopt(1) Fatal Error (%s). Terminating...\n' "${?}" >&2
  exit 1
fi
eval set -- "${TEMP}"
while : ; do
  case "${1}" in
    -D|--dry-run) DRY_RUN=1 ; shift ;;
    -d|--domain) DOMAIN="${2}" ; shift 2 ;;
    -f|--force) FORCE=1 ; shift ;;
    -h|--host*) THE_HOST_NAME="${2}" ; shift 2 ;;
    -i|--inter*) INTERACTIVE=1 ; shift ;;
    --help*) usage "${0##*/}" ; exit ;;
    -V|--vers*) showVersion=1 ; shift ;;
    -v|--verb*) ((VERBOSE += 1)) ; shift ;;
    --) shift ; break ;;
    *) printf '%s:: getopt internal error (%s)! Terminating...\n' "${0##*/}" "${?}" >&2 ; exit 1 ;;
  esac
done

if ((showVersion)) ; then
  printf '%s: version %d.%d.%d-%s\n' "${0##*/}" "${vMajor}" "${vMinor}" "${vPatch}" "${vvHash%$}"
  exit 0
fi

# This hostname/domain was the original purpose of this script.
DOMAIN="${DOMAIN:-btd.support}"
if [[ -z "${THE_HOST_NAME}" ]] ; then
  printf "%s: Need a host name for dynamic DNS to work." "${0##*/}"
  usage
  exit 2
fi

# Ensure the parent directory of ${IP_ADDRESS_CACHE} exists and is writeable.
if ! [[ -d "${IP_ADDRESS_CACHE%/*}" ]] ; then
  printf "%s: ERROR: missing '%s'. Cannot continue." "${0##*/}" "${IP_ADDRESS_CACHE%/*}"
  usage
  exit 3
fi
if ! [[ -w "${IP_ADDRESS_CACHE%/*}" ]] ; then
  printf "%s: ERROR: '%s' is not writeable. Cannot continue." "${0##*/}" "${IP_ADDRESS_CACHE%/*}"
  usage
  exit 4
fi

# This is meant to be run regularly from cron(8), so deal with output.
if ((INTERACTIVE == 0)) ; then
  exec 1> "/var/tmp/${0##*/}.out"
  exec 2> "/var/tmp/${0##*/}.err"
fi

((VERBOSE)) && set -o xtrace
((VERBOSE > 1)) && set -o errtrace functrace

declare -r API_BASE_ROUTE="/v2/domains/${DOMAIN}/records"

# Our last-known public IP address(es) is(are) cached in local storage. The
# cache consists of one or (at most) two lines. The first line must be the
# IPv4 address, the optional second line is the IPv6 address.
declare -a cached_ip_list
if [[ -s "${IP_ADDRESS_CACHE}" ]] ; then
  # SC2046: we *want* words to be split.
  # shellcheck disable=SC2046
  mapfile -t cached_ip_list <<<$(grep -v '^#' "${IP_ADDRESS_CACHE}" | tr -d '\012')
fi

# Hit the server at WHATS_MY_IP_URL to get the current public IPv4 and IPv6
# addresses.
current_ipv4=$(curl -4 --silent -o - "${WHATS_MY_IP_URL}")
current_ipv6=$(curl -6 --silent -o - "${WHATS_MY_IP_URL}")

# Empty IP address cache: create it with the IPv4 (and optionally, the IPv6)
# address.
if [[ -z "${cached_ip_list[0]}" ]] ; then
  # Maybe the first time doing this? Be sure /var/cache/public is
  # world writeable before running this script!
  if [[ -n "${current_ipv4}" ]] ; then
    if ((DRY_RUN)) ; then
      printf "Would have added IPv4 '%s' to '%s'\n" "${current_ipv4}" "${IP_ADDRESS_CACHE}"
    else
      printf '%s\n' "${current_ipv4}" > "${IP_ADDRESS_CACHE}"
    fi
  else
    printf '%s: unable to get our current Public IPv4 address, and no known previous IPv4 address. Bad News!\n' "${0##*/}" >&2
    exit 3
  fi
fi
if [[ -z "${cached_ip_list[1]}" ]] ; then
  # Save the inet6 address if we have one. I *think* we do not care if
  # current_ipv6 is not set. It depends on whether the invoking host
  # *has* an inet6 address.
  if [[ -n "${current_ipv6}" ]] ; then
    if ((DRY_RUN)) ; then
      printf "Would have updated '%s' with '%s'\n" "${IP_ADDRESS_CACHE}" "${current_ipv6}"
    else
      typeset temp_file="$(mktemp)"
      # SC2064: I *want* this parameter expanded now.
      # shellcheck disable=SC2064
      trap "rm -f ${temp_file} ; exit ;" 0
      (
	head -n 1 "${IP_ADDRESS_CACHE}"
	printf '%s\n' "${current_ipv6}"
      ) > "${temp_file}" && mv "${temp_file}" "${IP_ADDRESS_CACHE}"
    fi
  fi
fi

# Get the entire domain record (zone) from Digital Ocean.
if ! DOMAIN_JSON=$(do_curl GET "${API_BASE_ROUTE}?page=1&per_page=100") ; then
  curl_exit_value="${?}"
  printf '%s: unable to get domain records.\n' "${0##*/}" >&2
  exit "${curl_exit_value}"
fi

# Check the first cached value against the just-retrieved IPv4
# address.
if ((FORCE)) || [[ "${cached_ip_list[0]}" != "${current_ipv4}" ]] ; then

  # Save this new IP address in the cache.
  if ((DRY_RUN)) ; then
    printf "Would have added '%s' to '%s'.\n" "${current_ipv4}" "${IP_ADDRESS_CACHE}"
  else
    printf '%s\n' "${current_ipv4}" > "${IP_ADDRESS_CACHE}"
  fi

  # Get the 'A' record ID from D.O. This is a fatal error because we
  # only know how to *update* existing records (as of this version of
  # the script).
  # TODO: create a new A record if it does not exist.
  # https://docs.digitalocean.com/reference/api/api-reference/#operation/get_domain_record
  # (documentation link updated Tue May 10 06:28:40 AM CDT 2022)
  if ! A_RECORD_ID=$(get_domain_record_id "${DOMAIN_JSON}" 'A' 'name' "${THE_HOST_NAME}") ; then
    printf '%s: FATAL: unable to get domain "A" record ID.\n' "${0##*/}" >&2
    exit 1
  fi
  if [[ -z "${A_RECORD_ID}" ]] ; then
    printf '%s: FATAL: unable to parse JSON to discern the domain "A" record ID for '%s' (JSON: %s).\n' \
	   "${0##*/}" \
	   ${THE_HOST_NAME} \
	   "${DOMAIN_JSON}" >&2
    exit 1
  fi

  if ((DRY_RUN)) ; then
    printf "Would have updated A record '%s' at Digital Ocean.\n" "${A_RECORD_ID}"
  else
    # Update the 'A' record for this hostname.
    # https://docs.digitalocean.com/reference/api/api-reference/#operation/patch_update_domain_record
    # (documentation link updated Tue May 10 06:28:40 AM CDT 2022)
    if ! RESPONSE=$(do_curl PUT "${API_BASE_ROUTE}/${A_RECORD_ID}" '{"data":"'"${current_ipv4}"'"}') ||
	! [[ "${RESPONSE}" =~ .*${A_RECORD_ID}.* ]] ; then
      curl_exit_value="${?}"
      ((VERBOSE)) && printf '"%s: unable to update domain record %s (%d).\n' \
			    "${0##*/}" "${A_RECORD_ID}" "${curl_exit_value}" >&2
      ((VERBOSE)) && printf 'response: %s\n' "${RESPONSE}" >&2
      exit "${curl_exit_value}"
    fi
  fi
else
  ((VERBOSE)) && printf '%s: No change in IPv4 address %s\n' "${0##*/}" "${current_ipv4}" >&2
fi
# Check the for a second cached value against the just-retrieved IPv6
# address.
if ((FORCE)) || [[ -n "${cached_ip_list[1]}" ]] && [[ "${cached_ip_list[1]}" != "${current_ipv6}" ]] ; then

  if ((DRY_RUN)) ; then
    printf "Would have added IPv6 address '%s' to '%s'\n" "${current_ipv6}" "${IP_ADDRESS_CACHE}"
  else
    # Save this new IPv6 address in the cache.
    typeset temp_file="$(mktemp)"
    # SC2064: I *want* this parameter expanded now.
    # shellcheck disable=SC2064
    trap "rm -f ${temp_file} ; exit ;" 0
    (
      head -n 1 "${IP_ADDRESS_CACHE}"
      printf '%s\n' "${current_ipv6}"
    ) > "${temp_file}" && mv "${temp_file}" "${IP_ADDRESS_CACHE}"
  fi

  # Get the 'AAAA' record ID from D.O. This is not a fatal problem.
  # TODO: create a new AAAA record if we have an IPv6 address.
  # https://developers.digitalocean.com/documentation/v2/#retrieve-an-existing-domain-record
  if ! AAAA_RECORD_ID=$(get_domain_record_id "${DOMAIN_JSON}" 'AAAA' 'name' "${THE_HOST_NAME}") ||
     [[ -z "${AAAA_RECORD_ID}" ]] ; then
    printf '%s: WARNING: unable to get domain "AAAA" record ID.\n' "${0##*/}" >&2
  fi

  if ((DRY_RUN)) ; then
    printf "Would have updated AAAA record '%s' at Digital Ocean.\n" "${AAAA_RECORD_ID}"
  else
    # Update the 'AAAA' record for this hostname if we have an existing one.
    # https://developers.digitalocean.com/documentation/v2/#update-a-domain-record
    if [[ -n "${AAAA_RECORD_ID}" ]] ; then
      if ! RESPONSE=$(do_curl PUT "${API_BASE_ROUTE}/${AAAA_RECORD_ID}" '{"data":"'"${current_ipv6}"'"}') ||
	  ! [[ "${RESPONSE}" =~ .*${AAAA_RECORD_ID}.* ]] ; then
	curl_exit_value="${?}"
	((VERBOSE)) && printf '"%s: unable to update domain record %s (%d).\n' \
			      "${0##*/}" "${AAAA_RECORD_ID}" "${curl_exit_value}" >&2
	((VERBOSE)) && printf 'response: %s\n' "${RESPONSE}" >&2
	exit "${curl_exit_value}"
      fi
    fi
  fi
else
  ((VERBOSE)) && printf '%s: No change in IPv6 address %s\n' "${0##*/}" "${current_ipv6}" >&2
fi

exit

# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: ++ ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***

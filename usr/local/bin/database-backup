#!/bin/zsh
# shellcheck shell=bash disable=SC2016,SC2034,SC2048,SC2064,SC2069,SC2154,SC2155,SC2207,SC2296,SC2312
# SC2016: Ignore things that look to shellcheck like parameter expansions.
# SC2034: Ignore unused parameters (mainly version number)
# SC2048: shellcheck conservative quoting recommendations
# SC2064: I *want* parameters to expand at the time of setting the trap
# SC2069: ZSH handles redirection specifiers differentley from BASH
# SC2154: referenced parameters are set by the our_commands stuff.
# SC2155: Declare and assign separately to avoid masking return values.
# SC2207: ZSH mapfile is different from BASH
# SC2296: ZSH parameter expansions *can* start with (
# SC2312: I considered invoking commands separately...

##############################################################################
##
## database-backup
##
## Backup the MySQL Rivendell database with aging. Optionally rsync(1) a copy
## of the backup to a separate location.
##
##############################################################################

# In which we find strftime() and $EPOCHSECONDS.
zmodload zsh/datetime
# In which we find the '=~' test(1) operator.
zmodload zsh/regex

# This script complies with Semantic Versioning: http://semver.org/
v_major=0
v_minor=2
v_patch=6
v_hash='$Hash$'

##############################################################################
##############################################################################
##
## Locally defined subroutines
##
##############################################################################
##############################################################################

# usage shows how to use this command.
function usage() {
  local -r my_name="${1:t}"

  ${CAT} <<EOF
NAME

${my_name}

SYNOPSIS

${my_name} [ --verbose (-v) ] [ --help (-h) ] [ --version (-V) ]
                [ --rd-conf (-r) <Rivendell-configuation-file> ]

DESCRIPTION

$(${FMT} <<<"${my_name} creates a backup of the current Rivendell database.")

$(${FMT} <<<"Specify an alternate Rivendell configuration file with the '--rd-conf <filename>' option (short option: '-r'). The <filename> argument must be a full path name to an existing Rivendell configuration file.")

$(${FMT} <<<"Use the option '--verbose' (short option: '-v') to have ${my_name} be chatty about its progress.")

$(${FMT} <<<"Use the option '--version' (short option: '-V') to have ${my_name} display its version number and terminate without performing a backup.")

SEE ALSO

rd.conf(5), mysql(1)

EOF
}

# db_param() retrieves the named database configuration parameter from
# the "mySQL" section of /etc/rd.conf.
function db_param() {
  local -r db_conf="${RD_CONF:-/etc/rd.conf}"
  local -r db_parameter=${1:?"Need a database parameter to look up in '${db_conf}'"}

  local -i return_value=0

  if ! [[ -r "${db_conf}" ]] ; then
    ${LOGGER} --stderr -t "${0:t}" -p local7.err -i "ERROR: Cannot read '${db_conf}'. Cannot continue."
    return 1
  fi

  if ! local db_param_value=$(${SED} -e '1,/\[mySQL/d' -e '/^\[/,$d' "${db_conf}" | ${AWK} -F '=' "BEGIN{IGNORECASE=1}/^${db_parameter}=/{print \$2}") ; then
    return_value=${?}
    ${LOGGER} --stderr -t "${0:t}" -p local7.err -i "ERROR: Cannot extract database configuration parameter '${db_parameter}' from '${db_conf}' (${return_value}). Cannot continue."
    return 1
  fi
  printf "%s" "${db_param_value}"
  return
}

##############################################################################
##############################################################################
##
## Script main line.
##
##############################################################################
##############################################################################

############# BEGIN external shell commands used in this script. #############
# This script uses these 14 external commands.
# Look for them in their upper case, parameter expanded form.
our_commands=( awk cat find fmt getopt logger man mkdir mktemp mysqldump rm rsync sed tar )
# Find the executables we need; this uses some basic shell and a ZSH trick:
# the (U) in the eval says to evaluate the parameter as all upper case
# letters. This snippet generates shell parameters representing the upper case
# equivalent of the command names and sets the parameter values to the full path
# of the commands.
# Refresh this segment in Emacs by marking the appropriate region (or the whole
# buffer with C-xH) and replacing it with C-uM-|mk-ourCommands --script (shell-command-on-region).
typeset C D
# SC2048: shellcheck overly aggressive quote recommendation.
# shellcheck disable=SC2048
for C in ${our_commands[*]} ; do
  # shellcheck disable=SC2154 # ZSH: ${path} is set by the shell.
  for D in ${path} ; do
    # shellcheck disable=SC2140,SC2086,SC2296 # we need the quotes, ZSH-specific expansion
    [[ -x "${D}/${C}" ]] && { eval "${(U)C//-/_}"="${D}/${C}" ; break ; }
  done
  # shellcheck disable=SC2296,SC2312 # ZSH-specific expansion
  [[ -x $(eval print \$"${(U)C//-/_}") ]] || { print "Cannot find ${C}! Done."; return 1 ; }
done
unset our_commands C D
############## END external shell commands used in this script. ##############

##############################################################################
##############################################################################
##
## Script Main Line
##
##############################################################################
##############################################################################

typeset -i VERBOSE=0
typeset -i SHOW_VERSION=0
typeset RD_CONF="${RD_CONF:-/etc/rd.conf}"

if ! TEMP=$(${GETOPT} -o hr:Vv --long help,rd-conf:,version,verbose -n "${0:t}" -- "${@}") ; then
  print "getopt(1) Fatal Error (${?}). Terminating..." >&2
  return 1
fi
eval set -- "${TEMP}"
while : ; do
    # VERBOSE is used, but in a non-Bash way.
    # shellcheck disable=SC2034
    case "${1}" in
        -h|--help) usage "${0}" ; exit ;;
        -r|--rd-conf) RD_CONF="${2}" ; shift 2 ;;
        -V|--version) SHOW_VERSION=1 ; shift ;;
        -v|--verbose) ((VERBOSE += 1)) ; shift ;;
        --) shift ; break ;;
        *) print "${0:t}: getopt internal error!. Terminating..." >&2 ; return 1 ;;
    esac
done
unset TEMP

if ((SHOW_VERSION)) ; then
    typeset commit_hash="${v_hash}"
    # SC2016 (info): Expressions don't expand in single quotes... $Hash$ is not a parameter expansion.
    # shellcheck disable=SC2016
    [[ "${v_hash}" == '$Hash$' ]] &&
        commit_hash="prerelase"
    # SC2299: ZSH handles nested parameter expansion.
    # shellcheck disable=SC2299
    print "${0:t}: version ${v_major}.${v_minor}.${v_patch}-${${commit_hash#\$Hash: }%$}"
    exit 0
fi

# Unless running in "very verbose" mode, direct STDOUT and STDERR of
# this script and all commands called by this script to separate
# files.
if ((VERBOSE < 2)) ; then
  exec 1> "/var/tmp/${0:t}.out"
  exec 2> "/var/tmp/${0:t}.err"
fi
((VERBOSE)) && setopt xtrace

# Prefer the "canonical" location of zsh-functions.
# This script uses 'doSQL' and 'sendNotification' from zsh-functions.
if [[ -r /usr/bin/zsh-functions ]] ; then
  source /usr/bin/zsh-functions
elif [[ -r /usr/local/bin/zsh-functions ]] ; then
  source /usr/local/bin/zsh-functions
else
  ${LOGGER} --stderr -t "${0:t}" -p local7.err -i "ERROR: Cannot read zsh-functions in '/usr/local/bin' or in 'usr/bin'. Cannot continue."
  exit
fi

# Use the Rivendell database version in the backup filename.
typeset db_version=$(doSQL "select DB from VERSION")

# Also use the current date and time in the backup filename.
typeset TODAY=$(strftime '%Y-%m-%d-%H%M%S' "${EPOCHSECONDS}")

typeset TMPDIR=${TMPDIR:-/var/tmp}
typeset DUMPDIR=${DUMPDIR:-${TMPDIR}/mysql}
typeset DUMP_OUTPUT=$(${MKTEMP} --tmpdir="${TMPDIR}" mysqldump-output.XXXXXXXXXX)

# Optional: specify the name of an additional backup directory in
# which to rsync(1) the backup tarball. It is best if this directory
# is on a physically distinct medium from the database copy that is in
# ${DUMPDIR}.
#BACKUP_DIR=${BACKUP_DIR:-${ROOT:-/}var/snd/rivendell-database-backup}

# To whom we should send email if anything breaks.
typeset MAILTO=${MAILTO:-"dklann@broadcasttool.com"}

## Stash the rsync exit codes from the manual page into the
## associative array. The exit code number is the array index and the
## textual description is its value.
typeset -A rsync_exit_codes
typeset oIFS="${IFS}"
IFS=$'=\n'
# SC2190 (warning): Elements in associative arrays need index... (ZSH)
# shellcheck disable=SC2190
rsync_exit_codes=( $(MANWIDTH=999 ${MAN} rsync |
                         ${SED} -e '1,/EXIT VALUES/d' -e '/ENVIRONMENT VARIABLES/,$d' -e '/^$/d' |
                         ${AWK} -F'[[:space:]]{2,}' '{print $2 "=\"" $3 "\""}') )
IFS="${oIFS}"

trap "${RM} -f ${DUMP_OUTPUT}; exit" 0 1 2 3

# Hang on to this many days of backups.
typeset -i KEEP=${KEEP:-31}

# Neither of these is fatal if they break.
test -d "${DUMPDIR}" || ${MKDIR} -p "${DUMPDIR}"
test -n "${BACKUP_DIR}" && { test -d "${BACKUP_DIR}" || ${MKDIR} -p "${BACKUP_DIR}" ; }

# The list of all databases to backup. Add more here if necessary.
typeset -a databases
databases=( "$(db_param 'Database')" )

# Make the ouput files readable only by the owner.
# u=r,g=,o=
umask 0377

# Assume commands are successful.
typeset -i return_value=0

# Dump each requested database, in order.
for database in ${databases[*]} ; do
  database_dump_file="${DUMPDIR}/${database}-${db_version}-${TODAY}.sql"

  # Dump the database.
  ${MYSQLDUMP} --no-defaults \
               --host="$(db_param 'Hostname')" \
               --user="$(db_param 'Loginname')" \
               --password="$(db_param 'Password')" \
               --comments \
               --dump-date \
               --single-transaction \
               --add-drop-database \
               --add-drop-table \
               --databases "${database}" > "${database_dump_file}"
  return_value=${?}

  # Sanity checks for the output file.
  if [[ -f "${database_dump_file}" ]] ; then
    if ! [[ -s "${database_dump_file}" ]] ; then
      ${LOGGER} -t "${0:t}" -p local7.err -i "Error dumping ${database}: '${database_dump_file}' exists but is empty (${return_value})."
    fi
  else
    ${LOGGER} -t "${0:t}" -p local7.err -i "Error dumping ${database}: '${database_dump_file}' was not created (${return_value})."
  fi
done 2>&1 > "${DUMP_OUTPUT}"

# Do not proceed if there is output in $DUMP_OUTPUT (we had errors if
# there is).
if [[ -s "${DUMP_OUTPUT}" ]] ; then
  sendNotification "${0:t}" "${MAILTO}" DBDUMP-OUTPUT "Unexpectedly found messages in database dump log. See attached." "${DUMP_OUTPUT}"
  exit 1
fi

if ! ${TAR} --create --bzip2 --atime-preserve --directory="${TMPDIR}" --file "${TMPDIR}/mysql-backup-${db_version}-${TODAY}.tar.bz2" mysql ; then
  return_value=${?}
  sendNotification "${0:t}" "${MAILTO}" DBDUMP-TARBALL "Could not create tarball for MySQL database dumps in directory '${TMPDIR}' (ERROR CODE ${return_value})."
  exit "${return_value}"
fi

# clean up after archiving the database dumps
if ! ${RM} -rf "${DUMPDIR}" ; then
  return_value=${?}
  sendNotification "${0:t}" "${MAILTO}" DBDUMP-CLEANUP "Error removing '${DUMPDIR}' (ERROR CODE ${return_value})."
  exit "${return_value}"
fi

# remove backup archives that are more than ${KEEP} days old
if ! ${FIND} "${TMPDIR}" -maxdepth 1 -iname mysql-backup-\*.tar.bz2 -mtime +"${KEEP}" -print -delete ; then
  return_value=${?}
  sendNotification "${0:t}" "${MAILTO}" DBDUMP-AGING "Trouble removing backup archives (ERROR CODE ${return_value})."
  exit "${return_value}"
fi

# Successful purge, (optionally) make a backup of the backup (if
# BACKUP_DIR is set).
if [[ -n "${BACKUP_DIR}" ]] ; then
  if ! [[ -d "${BACKUP_DIR}" ]] ; then
    if ! ${MKDIR} -p "${BACKUP_DIR}" ; then
      return_value=${?}
      sendNotification "${0:t}" "${MAILTO}" DBDUMP-BACKUP_DIR "Backup directory '${BACKUP_DIR}' does not exist and could not create it. (ERROR CODE ${return_value})."
      exit "${return_value}"
    fi
  fi
  ${RSYNC} --archive --temp-dir="${TMPDIR}" --partial-dir=temp --delay-updates "${TMPDIR}"/mysql-backup-* "${BACKUP_DIR}"
  typeset -i rsync_exit_value=${?}
  # Ignore rsync(1) exit codes 23 and 24. They indicate that some
  # files were not transferred, but we do not care.
  if (( rsync_exit_value == 0 || rsync_exit_value == 23 || rsync_exit_value == 24 )) ; then
    # We cannot use the --delete option to
    # rsync(1) because we are specifying
    # individual files. Delete the backups
    # "manually".
    # As above: remove backup archives that are more than ${KEEP} days old
    if ! ${FIND} "${BACKUP_DIR}" -maxdepth 1 -iname mysql-backup-\*.tar.bz2 -mtime +"${KEEP}" -delete ; then
      return_value=${?}
      sendNotification "${0:t}" "${MAILTO}" DBDUMP-RSYNC-CLEAN "Trouble deleting files from ${BACKUP_DIR} (${return_value}). Seek professional help!"
      exit "${return_value}"
    fi
  else
    ${LOGGER} --stderr -t "${0:t}" -p local7.notice -i "NOTICE: rsync returned '${rsync_exit_value}': ${rsync_exit_codes[${rsync_exit_value}]}."
  fi
fi

exit
# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: ++ ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***

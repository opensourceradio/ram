#!/bin/zsh
# shellcheck shell=bash disable=SC2016,SC2034,SC2048,SC2064,SC2069,SC2154,SC2207,SC2296,SC2312
# SC2016: Ignore things that look to shellcheck like parameter expansions.
# SC2034: Ignore unused parameters (mainly version number)
# SC2048: shellcheck conservative quoting recommendations
# SC2064: I *want* parameters to expand at the time of setting the trap
# SC2069: ZSH handles redirection specifiers differentley from BASH
# SC2154: referenced parameters are set by the our_commands stuff.
# SC2207: ZSH mapfile is different from BASH
# SC2296: ZSH parameter expansions *can* start with (
# SC2312: I considered invoking commands separately...

##############################################################################
##
## database-backup
##
## Backup all MySQL databases with aging. Optionally rsync(1) a copy
## of the backup to a separate location.
##
##############################################################################

# In which we find strftime() and $EPOCHSECONDS.
zmodload zsh/datetime
# In which we find the '=~' test(1) operator.
zmodload zsh/regex

# This script complies with Semantic Versioning: http://semver.org/
v_major=0
v_minor=2
v_patch=1
v_hash='$Hash$'

# usage shows how to use this command.
function usage() {
  local -r my_name="${1:t}"

  ${CAT} <<EOF
NAME

${my_name}

SYNOPSIS

${my_name} [ --verbose (-v) ] [ --help (-h) ] [ --version (-V) ]

DESCRIPTION

$(${FMT} <<<"${my_name} creates a backup of the current Rivendell database.")

$(${FMT} <<<"Use the option '--verbose' (short option: '-v') to have ${my_name} be chatty about its progress.")

$(${FMT} <<<"Use the option '--version' (short option: '-V') to have ${my_name} display its version number and terminate without performing a backup.")

EOF
}

############# BEGIN external shell commands used in this script. #############
# This script uses these 11 external commands.
# Look for them in their upper case, parameter expanded form.
our_commands=( cat find fmt getopt logger mkdir mktemp mysqldump rm rsync tar )
# Find the executables we need; this uses some basic shell and a ZSH trick:
# the (U) in the eval says to evaluate the parameter as all upper case
# letters. This snippet generates shell parameters representing the upper case
# equivalent of the command names and sets the parameter values to the full path
# of the commands.
# Refresh this segment in Emacs by marking the appropriate region (or the whole
# buffer with C-xH) and replacing it with C-uM-|mk-ourCommands --script (shell-command-on-region).
typeset C D
# SC2048: shellcheck overly aggressive quote recommendation.
# shellcheck disable=SC2048
for C in ${our_commands[*]} ; do
  # shellcheck disable=SC2154 # ZSH: ${path} is set by the shell.
  for D in ${path} ; do
    # shellcheck disable=SC2140,SC2086,SC2296 # we need the quotes, ZSH-specific expansion
    [[ -x "${D}/${C}" ]] && { eval "${(U)C//-/_}"="${D}/${C}" ; break ; }
  done
  # shellcheck disable=SC2296,SC2312 # ZSH-specific expansion
  [[ -x $(eval print \$"${(U)C//-/_}") ]] || { print "Cannot find ${C}! Done."; return 1 ; }
done
unset our_commands C D
############## END external shell commands used in this script. ##############

VERBOSE=0
SHOW_VERSION=0

if ! TEMP=$(${GETOPT} -o hVv --long help,version,verbose -n "${0:t}" -- "${@}") ; then
  print "getopt(1) Fatal Error (${?}). Terminating..." >&2
  return 1
fi
eval set -- "${TEMP}"
while : ; do
    # VERBOSE is used, but in a non-Bash way.
    # shellcheck disable=SC2034
    case "${1}" in
        -h|--help) usage "${0}" ; exit ;;
        -V|--version) SHOW_VERSION=1 ; shift ;;
        -v|--verbose) ((VERBOSE += 1)) ; shift ;;
        --) shift ; break ;;
        *) print "${0:t}: getopt internal error!. Terminating..." >&2 ; return 1 ;;
    esac
done
unset TEMP

if ((SHOW_VERSION)) ; then
    typeset commit_hash="${v_hash}"
    # SC2016 (info): Expressions don't expand in single quotes... $Hash$ is not a parameter expansion.
    # shellcheck disable=SC2016
    [[ "${v_hash}" == '$Hash$' ]] &&
        commit_hash="prerelase"
    # SC2299: ZSH handles nested parameter expansion.
    # shellcheck disable=SC2299
    print "${0:t}: version ${v_major}.${v_minor}.${v_patch}-${${commit_hash#\$Hash: }%$}"
    exit 0
fi

# Log STDOUT and STDERR of this script and all commands called by this
# script to separate files.
exec 1> "/var/tmp/${0:t}.out"
exec 2> "/var/tmp/${0:t}.err"

# Prefer the "canonical" location of zsh-functions.
if [[ -r /usr/bin/zsh-functions ]] ; then
  source /usr/bin/zsh-functions
elif [[ -r /usr/local/bin/zsh-functions ]] ; then
  source /usr/local/bin/zsh-functions
else
  ${LOGGER} --stderr -t "${0:t}" -p local7.err -i "ERROR: Cannot read zsh-functions in '/usr/local/bin' or in 'usr/bin'. Cannot continue."
  exit
fi

# Current date and time.
TODAY=$(strftime '%Y-%m-%d-%H%M%S' "${EPOCHSECONDS}")

TMPDIR=${ROOT:-/}var/tmp
DUMPDIR=${DUMPDIR:-${TMPDIR}/mysql}
DUMP_OUTPUT=$(${MKTEMP} --tmpdir="${TMPDIR}" mysqldump-output.XXXXXXXXXX)

# Optional: specify the name of an additional backup directory in
# which to rsync(1) the backup tarball. It is best if this directory
# is on a physically distinct medium from the database copy that is in
# ${DUMPDIR}.
#BACKUP_DIR=${BACKUP_DIR:-${ROOT:-/}var/snd/rivendell-database-backup}

# Database credentials. This is highly site specific.
MY_CNF=${MY_CNF:-${HOME:-${ROOT:-/}home/rivendell}/.my.cnf-privileged}

# To whom we should send email if anything breaks.
MAILTO=${MAILTO:-"dklann@broadcasttool.com"}

## Stash the rsync exit codes from the manual page into the
## associative array. The exit code number is the array index and the
## textual description is its value.
typeset -A rsync_exit_codes
oIFS="${IFS}"
IFS=$'=\n'
# SC2190 (warning): Elements in associative arrays need index... (ZSH)
# shellcheck disable=SC2190
rsync_exit_codes=( $(MANWIDTH=999 ${MAN} rsync |
                         ${SED} -e '1,/EXIT VALUES/d' -e '/ENVIRONMENT VARIABLES/,$d' -e '/^$/d' |
                         ${AWK} -F'[[:space:]]{2,}' '{print $2 "=\"" $3 "\""}') )
IFS="${oIFS}"

trap "${RM} -f ${DUMP_OUTPUT}; exit" 0 1 2 3

# Hang on to this many days of backups.
KEEP=${KEEP:-31}

# Neither of these is fatal if they break.
test -d "${DUMPDIR}" || ${MKDIR} -p "${DUMPDIR}"
test -n "${BACKUP_DIR}" && { test -d "${BACKUP_DIR}" || ${MKDIR} -p "${BACKUP_DIR}" ; }

# The list of all databases to backup.
databases=( Rivendell )

# Make the ouput files readable only by the owner.
# u=r,g=,o=
umask 0377

# Dump each database into two separate files: one with data and one
# without (to recreate an empty database).
for database in ${databases[*]} ; do
  # Dump the database.
  ${MYSQLDUMP} --defaults-file="${MY_CNF}" --comments --dump-date --single-transaction --add-drop-database --add-drop-table --databases "${database}" > "${DUMPDIR}/${database}-${TODAY}.sql"
  dbDumpVal=${?}
  # Dump just the database schema.
  ${MYSQLDUMP} --defaults-file="${MY_CNF}" --comments --dump-date --no-data --databases "${database}" > "${DUMPDIR}/${database}-SCHEMA-${TODAY}.sql"
  schemaDumpVal=${?}

  # Sanity checks for the output files.
  if [[ -f ${DUMPDIR}/${database}-${TODAY}.sql ]] ; then
    if ! [[ -s ${DUMPDIR}/${database}-${TODAY}.sql ]] ; then
      ${LOGGER} -t "${0:t}" -p local7.err -i "Error dumping ${database}: ${DUMPDIR}/${database}-${TODAY}.sql exists but is empty (${dbDumpVal})."
    fi
  else
    ${LOGGER} -t "${0:t}" -p local7.err -i "Error dumping ${database}: ${DUMPDIR}/${database}-${TODAY}.sql was not created (${dbDumpVal})."
  fi
  if [[ -f ${DUMPDIR}/${database}-SCHEMA-${TODAY}.sql ]] ; then
    if ! [[ -s ${DUMPDIR}/${database}-SCHEMA-${TODAY}.sql ]] ; then
      ${LOGGER} -t "${0:t}" -p local7.err -i "Error dumping Schema for ${database}: ${DUMPDIR}/${database}-SCHEMA-${TODAY}.sql exists but is empty (${schemaDumpVal})."
    fi
  else
    ${LOGGER} -t "${0:t}" -p local7.err -i "Error dumping Schema for ${database}: ${DUMPDIR}/${database}-SCHEMA-${TODAY}.sql was not created (${schemaDumpVal})."
  fi
done 2>&1 > "${DUMP_OUTPUT}"

# Do not proceed if there is output in $DUMP_OUTPUT (we had errors if
# there is).
if [[ -s "${DUMP_OUTPUT}" ]] ; then
  sendNotification "${0:t}" "${MAILTO}" DBDUMP-OUTPUT "Unexpectedly found messages in database dump log. See attached." "${DUMP_OUTPUT}"
  exit 1
fi

if ! ${TAR} --create --bzip2 --atime-preserve --directory="${TMPDIR}" --file "${TMPDIR}/mysql-backup-${TODAY}.tar.bz2" mysql ; then
  returnValue=${?}
  sendNotification "${0:t}" "${MAILTO}" DBDUMP-TARBALL "Could not create tarball for MySQL database dumps in directory '${TMPDIR}' (ERROR CODE ${returnValue})."
  exit "${returnValue}"
fi

# clean up after archiving the database dumps
if ! ${RM} -rf "${DUMPDIR}" ; then
  returnValue=${?}
  sendNotification "${0:t}" "${MAILTO}" DBDUMP-CLEANUP "Error removing '${DUMPDIR}' (ERROR CODE ${returnValue})."
  exit "${returnValue}"
fi

# remove backup archives that are more than ${KEEP} days old
if ! ${FIND} "${TMPDIR}" -maxdepth 1 -iname mysql-backup-\*.tar.bz2 -mtime +"${KEEP}" -print -delete ; then
  returnValue=${?}
  sendNotification "${0:t}" "${MAILTO}" DBDUMP-AGING "Trouble removing backup archives (ERROR CODE ${returnValue})."
  exit "${returnValue}"
fi

# successful purge, (optionally) make a backup of the backup (if
# BACKUP_DIR is set).
if [[ -n "${BACKUP_DIR}" ]] ; then
  if ! [[ -d "${BACKUP_DIR}" ]] ; then
    if ! ${MKDIR} -p "${BACKUP_DIR}" ; then
      returnValue=${?}
      sendNotification "${0:t}" "${MAILTO}" DBDUMP-BACKUP_DIR "Backup directory '${BACKUP_DIR}' does not exist and could not create it. (ERROR CODE ${returnValue})."
      exit "${returnValue}"
    fi
  fi
  ${RSYNC} --archive --temp-dir="${TMPDIR}" --partial-dir=temp --delay-updates "${TMPDIR}"/mysql-backup-* "${BACKUP_DIR}"
  rsync_exit_value=${?}
  # Ignore rsync(1) exit codes 23 and 24. They indicate that some
  # files were not transferred, but we do not care.
  if (( rsync_exit_value == 0 || rsync_exit_value == 23 || rsync_exit_value == 24 )) ; then
    # We cannot use the --delete option to
    # rsync(1) because we are specifying
    # individual files. Delete the backups
    # "manually".
    # As above: remove backup archives that are more than ${KEEP} days old
    if ! ${FIND} "${BACKUP_DIR}" -maxdepth 1 -iname mysql-backup-\*.tar.bz2 -mtime +"${KEEP}" -delete ; then
      returnValue=${?}
      sendNotification "${0:t}" "${MAILTO}" DBDUMP-RSYNC-CLEAN "Trouble deleting files from ${BACKUP_DIR} (${returnValue}). Seek professional help!"
      exit "${returnValue}"
    fi
  else
    ${LOGGER} --stderr -t "${0:t}" -p local7.notice -i "NOTICE: rsync returned '${rsync_exit_value}': ${rsync_exit_codes[${rsync_exit_value}]}."
  fi
fi

exit

# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: ++ ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***
